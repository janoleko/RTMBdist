[{"path":"https://janoleko.github.io/RTMBdist/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Jan-Ole Koslik Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://janoleko.github.io/RTMBdist/articles/distlist.html","id":"continuous-distributions","dir":"Articles","previous_headings":"","what":"Continuous distributions","title":"List of distributions","text":"beta2(mu, phi): Beta distribution parameterised mean mu precision phi gamma2(mean, sd): Gamma distribution parameterised mean standard deviation skewnormal(xi, omega, alpha): Skew normal distribution parameterised location xi, scale omega skewness alpha skewt(mu, sigma, skew, df): Skew t-distribution parameterised location mu, scale sigma, skewness skew degrees freedom df truncnorm(mean, sd, min, max): Truncated normal distribution parameterised mean, standard deviation, lower bound min upper bound max t2(mu, sigma, df): Non-central scaled t-distribution parameterised location mu, scale sigma degrees freedom df vm(mu, kappa): Von Mises distribution parameterised mean direction mu concentration kappa wrpcauchy(mu, rho): Wrapped Cauchy distribution parameterised mean direction mu concentration rho zigamma(shape, scale, zeroprob): Zero-inflated gamma distribution parameterised shape scale, zero-probability zeroprob zigamma2(mean, sd, zeroprob): Zero-inflated gamma distribution parameterised mean, standard deviation zero-probability zeroprob","code":""},{"path":"https://janoleko.github.io/RTMBdist/articles/distlist.html","id":"discrete-distributions","dir":"Articles","previous_headings":"","what":"Discrete distributions","title":"List of distributions","text":"nbinom2(mu, size): Negative binomial distribution parameterised mean mu size size zinbinom(size, prob, zeroprob): Zero-inflated negative binomial distribution parameterised size size, success probability prob zero-probability zeroprob zipois(lambda, zeroprob): Zero-inflated Poisson distribution parameterised rate lambda zero-probability zeroprob","code":""},{"path":"https://janoleko.github.io/RTMBdist/articles/distlist.html","id":"multivariate-distributions","dir":"Articles","previous_headings":"","what":"Multivariate distributions","title":"List of distributions","text":"dirichlet(alpha): Dirichlet distribution parameterised concentration parameter vector alpha","code":""},{"path":"https://janoleko.github.io/RTMBdist/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jan-Ole Koslik. Author, maintainer.","code":""},{"path":"https://janoleko.github.io/RTMBdist/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Koslik J (2025). RTMBdist: Distributions compatible automatic differentiation RTMB. R package version 0.0.0.9000, https://janoleko.github.io/RTMBdist/.","code":"@Manual{,   title = {RTMBdist: Distributions compatible with automatic differentiation by RTMB},   author = {Jan-Ole Koslik},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://janoleko.github.io/RTMBdist/}, }"},{"path":"https://janoleko.github.io/RTMBdist/index.html","id":"rtmbdist","dir":"","previous_headings":"","what":"Distributions compatible with automatic differentiation by RTMB","title":"Distributions compatible with automatic differentiation by RTMB","text":"RTMBdist package extends functionality RTMB framework providing collection non-standard probability distributions compatible automatic differentiation (AD). RTMB enables flexible efficient modelling - including random effects - built-support limited standard distributions. package fills gap offering additional, AD-compatible distributions, broadening range models can implemented estimated using RTMB. full list distributions currently available given List distributions vignette.","code":""},{"path":"https://janoleko.github.io/RTMBdist/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Distributions compatible with automatic differentiation by RTMB","text":"can install development version RTMBdist GitHub :","code":"devtools::install_github(\"janoleko/RTMBdist\")"},{"path":"https://janoleko.github.io/RTMBdist/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Distributions compatible with automatic differentiation by RTMB","text":"Let’s pretend want numerical maximum likelihood estimation (MLE) gamma distribution parameterised terms mean standard deviation, available gamma2 family: magic RTMB, can also immediately simulate new data fitted model calculate residuals:","code":"library(RTMBdist) #> Loading required package: RTMB  # simulate data x <- rgamma2(100, mean = 5, sd = 2)  # negative log-likelihood function nll <- function(par) {   x <- OBS(x) # mark x as the response   mu <- exp(par[1]); ADREPORT(mu)   sigma <- exp(par[2]); ADREPORT(sigma)   -sum(dgamma2(x, mu, sigma, log = TRUE)) }  # automatically differentiable objective function object obj <- MakeADFun(nll, c(log(5), log(2)), silent = TRUE)  # model fitting opt <- nlminb(obj$par, obj$fn, obj$gr)  # model summary summary(sdreport(obj)) #>        Estimate Std. Error #> par   1.5705170 0.03480726 #> par   0.5151734 0.07757581 #> mu    4.8091338 0.16739278 #> sigma 1.6739287 0.12985637 # simulate new data x_new <- obj$simulate()  # calculate residuals osa <- oneStepPredict(obj, method = \"cdf\", trace = FALSE) qqnorm(osa$res); abline(0, 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":null,"dir":"Reference","previous_headings":"","what":"Reparameterised beta distribution — beta2","title":"Reparameterised beta distribution — beta2","text":"Density, distribution function, quantile function random generation beta distribution reparameterised terms mean concentration.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reparameterised beta distribution — beta2","text":"","code":"dbeta2(x, mu, phi, log = FALSE)  pbeta2(q, mu, phi)  qbeta2(p, mu, phi)  rbeta2(n, mu, phi)"},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reparameterised beta distribution — beta2","text":"x, q vector quantiles mu mean parameter, must interval 0 1. phi concentration parameter, must positive. log logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). p vector probabilities n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reparameterised beta distribution — beta2","text":"dbeta2 gives density, pbeta2 gives distribution function, qbeta2 gives quantile function, rbeta2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reparameterised beta distribution — beta2","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reparameterised beta distribution — beta2","text":"","code":"set.seed(123) x <- rbeta2(1, 0.5, 1) d <- dbeta2(x, 0.5, 1) p <- pbeta2(x, 0.5, 1) q <- qbeta2(p, 0.5, 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/dirichlet.html","id":null,"dir":"Reference","previous_headings":"","what":"Dirichlet distribution — dirichlet","title":"Dirichlet distribution — dirichlet","text":"Density Dirichlet distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dirichlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dirichlet distribution — dirichlet","text":"","code":"ddirichlet(x, alpha, log = TRUE)"},{"path":"https://janoleko.github.io/RTMBdist/reference/dirichlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dirichlet distribution — dirichlet","text":"x vector matrix quantiles. x vector, needs sum one. x matrix, row sum one. alpha vector matrix positive shape parameters log logical; TRUE, densities \\(p\\) returned \\(\\log(p)\\).","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dirichlet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dirichlet distribution — dirichlet","text":"ddirichlet gives density.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dirichlet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dirichlet distribution — dirichlet","text":"implementation ddirichlet allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dirichlet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dirichlet distribution — dirichlet","text":"","code":"ddirichlet(c(0.2, 0.3, 0.5), c(1, 2, 3)) #> [1] 1.504077"},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":null,"dir":"Reference","previous_headings":"","what":"Reparameterised gamma distribution — gamma2","title":"Reparameterised gamma distribution — gamma2","text":"Density, distribution function, quantile function random generation gamma distribution reparameterised terms mean standard deviation.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reparameterised gamma distribution — gamma2","text":"","code":"dgamma2(x, mean = 1, sd = 1, log = FALSE)  pgamma2(q, mean = 1, sd = 1, lower.tail = TRUE, log.p = FALSE)  qgamma2(p, mean = 1, sd = 1, lower.tail = TRUE, log.p = FALSE)  rgamma2(n, mean = 1, sd = 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reparameterised gamma distribution — gamma2","text":"x, q vector quantiles mean mean parameter, must positive. sd standard deviation parameter, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reparameterised gamma distribution — gamma2","text":"dgamma2 gives density, pgamma2 gives distribution function, qgamma2 gives quantile function, rgamma2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reparameterised gamma distribution — gamma2","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reparameterised gamma distribution — gamma2","text":"","code":"x <- rgamma2(1) d <- dgamma2(x) p <- pgamma2(x) q <- qgamma2(p)"},{"path":"https://janoleko.github.io/RTMBdist/reference/nbinom2.html","id":null,"dir":"Reference","previous_headings":"","what":"Reparameterised negative binomial distribution — nbinom2","title":"Reparameterised negative binomial distribution — nbinom2","text":"Density, distribution function, quantile function random generation negative binomial distribution reparameterised terms mean size.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/nbinom2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reparameterised negative binomial distribution — nbinom2","text":"","code":"dnbinom2(x, mu, size, log = FALSE)  pnbinom2(q, mu, size, lower.tail = TRUE, log.p = FALSE)  qnbinom2(p, mu, size, lower.tail = TRUE, log.p = FALSE)  rnbinom2(n, mu, size)"},{"path":"https://janoleko.github.io/RTMBdist/reference/nbinom2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reparameterised negative binomial distribution — nbinom2","text":"x, q vector quantiles mu mean parameter, must positive. size size parameter, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/nbinom2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reparameterised negative binomial distribution — nbinom2","text":"dnbinom2 gives density, pnbinom2 gives distribution function, qnbinom2 gives quantile function, rnbinom2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/nbinom2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reparameterised negative binomial distribution — nbinom2","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/nbinom2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reparameterised negative binomial distribution — nbinom2","text":"","code":"set.seed(123) x <- rnbinom2(1, 1, 2) d <- dnbinom2(x, 1, 2) p <- pnbinom2(x, 1, 2) q <- qnbinom2(p, 1, 2)"},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Skew normal distribution — skewnorm","title":"Skew normal distribution — skewnorm","text":"Density, distribution function, quantile function random generation skew normal distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skew normal distribution — skewnorm","text":"","code":"dskewnorm(x, xi = 0, omega = 1, alpha = 0, log = FALSE)  pskewnorm(q, xi = 0, omega = 1, alpha = 0, ...)  qskewnorm(p, xi = 0, omega = 1, alpha = 0, ...)  rskewnorm(n, xi = 0, omega = 1, alpha = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skew normal distribution — skewnorm","text":"x, q vector quantiles xi location parameter omega scale parameter, must positive. alpha skewness parameter, +/- Inf allowed. log logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). ... additional parameters passed sn package functions pskewnorm qskewnorm. p vector probabilities n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skew normal distribution — skewnorm","text":"dskewnorm gives density, pskewnorm gives distribution function, qskewnorm gives quantile function, rskewnorm generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Skew normal distribution — skewnorm","text":"implementation dskewnorm allows automatic differentiation RTMB functions imported sn package.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Skew normal distribution — skewnorm","text":"","code":"# alpha is skew parameter x <- rskewnorm(1, alpha = 1) d <- dskewnorm(x, alpha = 1) p <- pskewnorm(x, alpha = 1) q <- qskewnorm(p, alpha = 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/skewt.html","id":null,"dir":"Reference","previous_headings":"","what":"Skewed students t distribution — skewt","title":"Skewed students t distribution — skewt","text":"Density, distribution function, quantile function random generation skew t distribution (type 2).","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skewed students t distribution — skewt","text":"","code":"dskewt(x, mu = 0, sigma = 1, skew = 0, df = 1000, log = FALSE)  pskewt(q, mu = 0, sigma = 1, skew = 0, df = 1000,        method = 0, lower.tail = TRUE, log.p = FALSE)  qskewt(p, mu = 0, sigma = 1, skew = 0, df = 1000,        tol = 1e-8, method = 0)  rskewt(n, mu = 0, sigma = 1, skew = 0, df = 1000)"},{"path":"https://janoleko.github.io/RTMBdist/reference/skewt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skewed students t distribution — skewt","text":"x, q vector quantiles mu location parameter sigma scale parameter, must positive. skew skewness parameter, can positive negative. df degrees freedom, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). method integer value 0 5 selects computing method; see ‘Details’ pst documentation meaning values. method=0 (default value), automatic choice made among four actual computing methods, depending arguments. lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities tol scalar value regulates accuracy result qsn, measured probability scale. n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skewed students t distribution — skewt","text":"dskewt gives density, pskewt gives distribution function, qskewt gives quantile function, rskewt generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Skewed students t distribution — skewt","text":"corresponds skew t type 2 distribution GAMLSS (ST2), see pp. 411-412 Rigby et al. (2019) version implemented sn package. implementation dskewt allows automatic differentiation RTMB functions imported sn package. Caution: numerial optimisation, skew parameter NEVER initialised exactly zero. cause initial subsequent derivatives exactly zero hence parameter remain initial value.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Skewed students t distribution — skewt","text":"","code":"x <- rskewt(1, 1, 2, 5, 2) d <- dskewt(x, 1, 2, 5, 2) p <- pskewt(x, 1, 2, 5, 2) q <- qskewt(p, 1, 2, 5, 2)"},{"path":"https://janoleko.github.io/RTMBdist/reference/t2.html","id":null,"dir":"Reference","previous_headings":"","what":"Non-central and scaled students t distribution — t2","title":"Non-central and scaled students t distribution — t2","text":"Density, distribution function, quantile function random generation t distribution non-centrality scale parameters.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/t2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Non-central and scaled students t distribution — t2","text":"","code":"dt2(x, mu, sigma, df, log = FALSE)  pt2(q, mu, sigma, df)  rt2(n, mu, sigma, df)  qt2(p, mu, sigma, df)"},{"path":"https://janoleko.github.io/RTMBdist/reference/t2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Non-central and scaled students t distribution — t2","text":"x, q vector quantiles mu location parameter sigma scale parameter, must positive. df degrees freedom, must positive. log logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). n number random values return. p vector probabilities","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/t2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Non-central and scaled students t distribution — t2","text":"dt2 gives density, pt2 gives distribution function, qt2 gives quantile function, rt2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/t2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Non-central and scaled students t distribution — t2","text":"implementation dt2 allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/t2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Non-central and scaled students t distribution — t2","text":"","code":"x <- rt2(1, 1, 2, 5) d <- dt2(x, 1, 2, 5) p <- pt2(x, 1, 2, 5) q <- qt2(p, 1, 2, 5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/truncnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncated normal distribution — truncnorm","title":"Truncated normal distribution — truncnorm","text":"Density, distribution function, quantile function random generation truncated normal distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/truncnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncated normal distribution — truncnorm","text":"","code":"dtruncnorm(x, mean, sd, min = -Inf, max = Inf, log = FALSE)  ptruncnorm(q, mean = 0, sd = 1, min = -Inf, max = Inf,            lower.tail = TRUE, log.p = FALSE)  qtruncnorm(p, mean = 0, sd = 1, min = -Inf, max = Inf,            lower.tail = TRUE, log.p = FALSE)  rtruncnorm(n, mean = 0, sd = 1, min = -Inf, max = Inf)"},{"path":"https://janoleko.github.io/RTMBdist/reference/truncnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncated normal distribution — truncnorm","text":"x, q vector quantiles mean mean parameter, must positive. sd standard deviation parameter, must positive. min, max truncation bounds. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/truncnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncated normal distribution — truncnorm","text":"dtruncnorm gives density, ptruncnorm gives distribution function, qtruncnorm gives quantile function, rtruncnorm generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/truncnorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Truncated normal distribution — truncnorm","text":"implementation dtruncnorm allows automatic differentiation RTMB. Caution: x parameter dependent introduces non-differentiability.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/truncnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Truncated normal distribution — truncnorm","text":"","code":"x <- rtruncnorm(1, mean = 2, sd = 2, min = -1, max = 5) d <- dtruncnorm(x, mean = 2, sd = 2, min = -1, max = 5) p <- ptruncnorm(x, mean = 2, sd = 2, min = -1, max = 5) q <- qtruncnorm(p, mean = 2, sd = 2, min = -1, max = 5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":null,"dir":"Reference","previous_headings":"","what":"von Mises distribution — vm","title":"von Mises distribution — vm","text":"Density, distribution function random generation von Mises distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"von Mises distribution — vm","text":"","code":"dvm(x, mu = 0, kappa = 1, log = FALSE)  pvm(q, mu = 0, kappa = 1, from = NULL, tol = 1e-20)  rvm(n, mu = 0, kappa = 1, wrap = TRUE)"},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"von Mises distribution — vm","text":"x, q vector angles measured radians evaluate density function. mu mean direction distribution measured radians. kappa non-negative numeric value concentration parameter distribution. log logical; TRUE, densities returned log scale. value integration CDF starts. NULL, set mu - pi. tol precision evaluating distribution function n number random values return. wrap logical; TRUE, generated angles wrapped interval -pi pi.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"von Mises distribution — vm","text":"dvm gives density, pvm gives distribution function, rvm generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"von Mises distribution — vm","text":"implementation dvm allows automatic differentiation RTMB. rvm pvm simply wrappers corresponding functions circular.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"von Mises distribution — vm","text":"","code":"set.seed(1) x <- rvm(10, 0, 1) d <- dvm(x, 0, 1) p <- pvm(x, 0, 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapped Cauchy distribution — wrpcauchy","title":"wrapped Cauchy distribution — wrpcauchy","text":"Density random generation wrapped Cauchy distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapped Cauchy distribution — wrpcauchy","text":"","code":"dwrpcauchy(x, mu = 0, rho, log = FALSE)  rwrpcauchy(n, mu = 0, rho, wrap = TRUE)"},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapped Cauchy distribution — wrpcauchy","text":"x vector angles measured radians evaluate density function. mu mean direction distribution measured radians. rho concentration parameter distribution, must interval 0 1. log logical; TRUE, densities returned log scale. n number random values return. wrap logical; TRUE, generated angles wrapped interval -pi pi.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapped Cauchy distribution — wrpcauchy","text":"dwrpcauchy gives density rwrpcauchy generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"wrapped Cauchy distribution — wrpcauchy","text":"implementation dwrpcauchy allows automatic differentiation RTMB. rwrpcauchy simply wrapper rwrappedcauchyimported circular.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wrapped Cauchy distribution — wrpcauchy","text":"","code":"set.seed(1) x <- rwrpcauchy(10, 0, 1) d <- dwrpcauchy(x, 0, 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zero_inflate.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated density constructer — zero_inflate","title":"Zero-inflated density constructer — zero_inflate","text":"Constructs zero-inflated density function given probability density function","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zero_inflate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated density constructer — zero_inflate","text":"","code":"zero_inflate(dist, discrete = NULL)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zero_inflate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated density constructer — zero_inflate","text":"dist either probability density function probability mass function discrete logical; TRUE, density x = 0 zeroprob + (1-zeroprob) * dist(0, ...). Otherwise just zeroprob. standard cases, determined automatically. non-standard cases, set TRUE FALSE depending type dist. See details.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zero_inflate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated density constructer — zero_inflate","text":"zero-inflated density function first argument x, second argument zeroprob, additional arguments ... passed dist.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zero_inflate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated density constructer — zero_inflate","text":"definition zero-inflation different discrete continuous distributions. discrete distributions p.m.f. \\(f\\) zero-inflation probability \\(p\\), $$\\Pr(X = 0) = p + (1 - p) \\cdot f(0),$$ $$\\Pr(X = x) = (1 - p) \\cdot f(x), \\quad x > 0.$$ continuous distributions p.d.f. \\(f\\), $$f_{\\text{zinfl}}(x) = p \\cdot \\delta_0(x) + (1 - p) \\cdot f(x),$$ \\(\\delta_0\\) Dirac delta function zero.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zero_inflate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated density constructer — zero_inflate","text":"","code":"# Zero-inflated normal distribution dzinorm <- zero_inflate(dnorm) dzinorm(c(NA, 0, 2), 0.5, mean = 1, sd = 1) #> [1]        NA 0.5000000 0.1209854  # Zero-inflated Poisson distribution zipois <- zero_inflate(dpois) zipois(c(NA, 0, 1), 0.5, 1) #> [1]        NA 0.6839397 0.1839397  # Non-standard case: Zero-inflated reparametrised beta distribution dzibeta2 <- zero_inflate(dbeta2, discrete = FALSE)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated gamma distribution — zigamma","title":"Zero-inflated gamma distribution — zigamma","text":"Density, distribution function, random generation zero-inflated gamma distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated gamma distribution — zigamma","text":"","code":"dzigamma(x, shape, scale, zeroprob = 0, log = FALSE)  rzigamma(n, shape, scale, zeroprob = 0)  pzigamma(q, shape, scale, zeroprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated gamma distribution — zigamma","text":"x, q vector quantiles shape positive shape parameter scale positive scale parameter zeroprob zero-inflation probability 0 1. log logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated gamma distribution — zigamma","text":"dzigamma gives density, pzigamma gives distribution function, rzigamma generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated gamma distribution — zigamma","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated gamma distribution — zigamma","text":"","code":"x <- rzigamma(1, 1, 1, 0.5) d <- dzigamma(x, 1, 1, 0.5) p <- pzigamma(x, 1, 1, 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma2.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated and reparameterised gamma distribution — zigamma2","title":"Zero-inflated and reparameterised gamma distribution — zigamma2","text":"Density, distribution function, random generation zero-inflated gamma distribution reparameterised terms mean standard deviation.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated and reparameterised gamma distribution — zigamma2","text":"","code":"dzigamma2(x, mean = 1, sd = 1, zeroprob = 0, log = FALSE)  rzigamma2(n, mean = 1, sd = 1, zeroprob = 0)  pzigamma2(q, mean = 1, sd = 1, zeroprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated and reparameterised gamma distribution — zigamma2","text":"x, q vector quantiles mean mean parameter, must positive. sd standard deviation parameter, must positive. zeroprob zero-inflation probability 0 1. log logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated and reparameterised gamma distribution — zigamma2","text":"dzigamma2 gives density, pzigamma2 gives distribution function, rzigamma generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated and reparameterised gamma distribution — zigamma2","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated and reparameterised gamma distribution — zigamma2","text":"","code":"x <- rzigamma2(1, 2, 1, 0.5) d <- dzigamma2(x, 2, 1, 0.5) p <- pzigamma2(x, 2, 1, 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated negative binomial distribution — zinbinom","title":"Zero-inflated negative binomial distribution — zinbinom","text":"Density, distribution function, quantile function random generation zero-inflated negative binomial distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated negative binomial distribution — zinbinom","text":"","code":"dzinbinom(x, size, prob, zeroprob = 0, log = FALSE)  rzinbinom(n, size, prob, zeroprob = 0)  pzinbinom(q, size, prob, zeroprob = 0, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated negative binomial distribution — zinbinom","text":"x, q vector (non-negative integer) quantiles size size parameter, must positive. prob mean parameter, must positive. zeroprob zero-inflation probability 0 1. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). n number random values return. lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated negative binomial distribution — zinbinom","text":"dzinbinom gives density, pzinbinom gives distribution function, rzinbinom generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated negative binomial distribution — zinbinom","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated negative binomial distribution — zinbinom","text":"","code":"set.seed(123) x <- rzinbinom(1, 2, 0.5) d <- dzinbinom(x, 2, 0.5) p <- pzinbinom(x, 2, 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zipois.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated Poisson distribution — zipois","title":"Zero-inflated Poisson distribution — zipois","text":"Probability mass function, distribution function, random generation zero-inflated Poisson distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zipois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated Poisson distribution — zipois","text":"","code":"dzipois(x, lambda, zeroprob = 0, log = FALSE)  rzipois(n, lambda, zeroprob = 0)  pzipois(q, lambda, zeroprob = 0, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zipois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated Poisson distribution — zipois","text":"x, q integer vector counts lambda vector (non-negative) means zeroprob zero-inflation probability 0 1 log, log.p logical; return log-density TRUE n number random values return. lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\).","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zipois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated Poisson distribution — zipois","text":"dzipois gives probability mass function, pzipois gives distribution function, rzipois generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zipois.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated Poisson distribution — zipois","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zipois.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated Poisson distribution — zipois","text":"","code":"set.seed(123) x <- rzipois(1, 0.5, 1) d <- dzipois(x, 0.5, 1)"},{"path":"https://janoleko.github.io/RTMBdist/news/index.html","id":"rtmbdist-development-version","dir":"Changelog","previous_headings":"","what":"RTMBdist (development version)","title":"RTMBdist (development version)","text":"Package created","code":""},{"path":"https://janoleko.github.io/RTMBdist/news/index.html","id":"rtmbdist-development-version-1","dir":"Changelog","previous_headings":"","what":"RTMBdist 0.0.0.9000","title":"RTMBdist (development version)","text":"Initial release.","code":""}]
