[{"path":"https://janoleko.github.io/RTMBdist/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Jan-Ole Koslik Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://janoleko.github.io/RTMBdist/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jan-Ole Koslik. Author, maintainer.","code":""},{"path":"https://janoleko.github.io/RTMBdist/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Koslik J (2025). RTMBdist: Distributions compatible automatic differentiation RTMB. R package version 0.0.0.9000, https://janoleko.github.io/RTMBdist/.","code":"@Manual{,   title = {RTMBdist: Distributions compatible with automatic differentiation by RTMB},   author = {Jan-Ole Koslik},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://janoleko.github.io/RTMBdist/}, }"},{"path":"https://janoleko.github.io/RTMBdist/index.html","id":"rtmbdist","dir":"","previous_headings":"","what":"Distributions compatible with automatic differentiation by RTMB","title":"Distributions compatible with automatic differentiation by RTMB","text":"RTMBdist package extends functionality RTMB framework providing collection non-standard probability distributions compatible automatic differentiation (AD). RTMB enables flexible efficient modelling - including random effects - built-support limited standard distributions. package fills gap offering additional, AD-compatible distributions, broadening range models can implemented estimated using RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Distributions compatible with automatic differentiation by RTMB","text":"can install development version RTMBdist GitHub :","code":"devtools::install_github(\"janoleko/RTMBdist\")"},{"path":"https://janoleko.github.io/RTMBdist/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Distributions compatible with automatic differentiation by RTMB","text":"Let’s pretend want numerical maximum likelihood estimation (MLE) gamma distribution parametrised terms mean standard deviation.","code":"library(RTMBdist) #> Loading required package: RTMB  # draw data x <- rgamma2(100, mean = 5, sd = 2)  # negative log-likelihood function nll <- function(par) {   mu <- exp(par[1]); ADREPORT(mu)   sigma <- exp(par[2]); ADREPORT(sigma)   -sum(dgamma2(x, mu, sigma, log = TRUE)) }  # automatically differentiable objective function object obj <- MakeADFun(nll, c(log(5), log(2)), silent = TRUE)  # model fitting opt <- nlminb(obj$par, obj$fn, obj$gr)  summary(sdreport(obj)) #>        Estimate Std. Error #> par   1.6471688 0.03694199 #> par   0.6513479 0.07840871 #> mu    5.1922584 0.19181235 #> sigma 1.9181246 0.15039767"},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":null,"dir":"Reference","previous_headings":"","what":"Reparametrised beta distribution — beta2","title":"Reparametrised beta distribution — beta2","text":"Density, distribution function, quantile function random generation beta distribution reparametrised terms mean concentration.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reparametrised beta distribution — beta2","text":"","code":"dbeta2(x, mu, phi, log = FALSE)  pbeta2(q, mu, phi)  qbeta2(p, mu, phi, lower.tail = TRUE, log.p = FALSE)  rbeta2(n, mu, phi)"},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reparametrised beta distribution — beta2","text":"x, q vector quantiles mu mean parameter, must interval 0 1. phi concentration parameter, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). p vector probabilities lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number observations. length(n) > 1, length taken number required.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reparametrised beta distribution — beta2","text":"dbeta2 gives density, pbeta2 gives distribution function, qbeta2 gives quantile function, rbeta2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reparametrised beta distribution — beta2","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reparametrised beta distribution — beta2","text":"","code":"x = rbeta2(1) #> Error in rbeta2(1): argument \"mu\" is missing, with no default d = dbeta2(x) #> Error in dbeta2(x): argument \"mu\" is missing, with no default p = pbeta2(x) #> Error in pbeta2(x): argument \"mu\" is missing, with no default q = qbeta2(p) #> Error in qbeta2(p): argument \"mu\" is missing, with no default"},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":null,"dir":"Reference","previous_headings":"","what":"Reparametrised gamma distribution — gamma2","title":"Reparametrised gamma distribution — gamma2","text":"Density, distribution function, quantile function random generation gamma distribution reparametrised terms mean standard deviation.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reparametrised gamma distribution — gamma2","text":"","code":"dgamma2(x, mean = 1, sd = 1, log = FALSE)  pgamma2(q, mean = 1, sd = 1, lower.tail = TRUE, log.p = FALSE)  qgamma2(p, mean = 1, sd = 1, lower.tail = TRUE, log.p = FALSE)  rgamma2(n, mean = 1, sd = 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reparametrised gamma distribution — gamma2","text":"x, q vector quantiles mean mean parameter, must positive. sd standard deviation parameter, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities n number observations. length(n) > 1, length taken number required.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reparametrised gamma distribution — gamma2","text":"dgamma2 gives density, pgamma2 gives distribution function, qgamma2 gives quantile function, rgamma2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reparametrised gamma distribution — gamma2","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reparametrised gamma distribution — gamma2","text":"","code":"x = rgamma2(1) d = dgamma2(x) p = pgamma2(x) q = qgamma2(p)"},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":null,"dir":"Reference","previous_headings":"","what":"von Mises distribution — vm","title":"von Mises distribution — vm","text":"Density, distribution function random generation von Mises distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"von Mises distribution — vm","text":"","code":"dvm(x, mu = 0, kappa = 1, log = FALSE)  pvm(q, mu = 0, kappa = 1, from = NULL, tol = 1e-20)  rvm(n, mu = 0, kappa = 1, wrap = TRUE)"},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"von Mises distribution — vm","text":"x, q vector angles measured radians evaluate density function. mu mean direction distribution measured radians. kappa non-negative numeric value concentration parameter distribution. log logical; TRUE, densities returned log scale. value integration CDF starts. NULL, set mu - pi. tol precision evaluating distribution function n number observations. length(n) > 1, length taken number required. wrap logical; TRUE, generated angles wrapped interval -pi pi.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"von Mises distribution — vm","text":"dvm gives density, pvm gives distribution function, rvm generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"von Mises distribution — vm","text":"implementation dvm allows automatic differentiation RTMB. rvm pvm simply wrappers corresponding functions circular.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"von Mises distribution — vm","text":"","code":"set.seed(1) x = rvm(10, 0, 1) d = dvm(x, 0, 1) p = pvm(x, 0, 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapped Cauchy distribution — wrpcauchy","title":"wrapped Cauchy distribution — wrpcauchy","text":"Density random generation wrapped Cauchy distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapped Cauchy distribution — wrpcauchy","text":"","code":"dwrpcauchy(x, mu = 0, rho, log = FALSE)  rwrpcauchy(n, mu = 0, rho, wrap = TRUE)"},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapped Cauchy distribution — wrpcauchy","text":"x vector angles measured radians evaluate density function. mu mean direction distribution measured radians. rho concentration parameter distribution, must interval 0 1. log logical; TRUE, densities returned log scale. n number observations. length(n) > 1, length taken number required. wrap logical; TRUE, generated angles wrapped interval -pi pi.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapped Cauchy distribution — wrpcauchy","text":"dwrpcauchy gives density rwrpcauchy generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"wrapped Cauchy distribution — wrpcauchy","text":"implementation dwrpcauchy allows automatic differentiation RTMB. rwrpcauchy simply wrapper rwrappedcauchyimported circular.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wrapped Cauchy distribution — wrpcauchy","text":"","code":"set.seed(1) x = rwrpcauchy(10, 0, 1) d = dwrpcauchy(x, 0, 1)"},{"path":"https://janoleko.github.io/RTMBdist/news/index.html","id":"rtmbdist-development-version","dir":"Changelog","previous_headings":"","what":"RTMBdist (development version)","title":"RTMBdist (development version)","text":"Package created","code":""},{"path":"https://janoleko.github.io/RTMBdist/news/index.html","id":"rtmbdist-development-version-1","dir":"Changelog","previous_headings":"","what":"RTMBdist 0.0.0.9000","title":"RTMBdist (development version)","text":"Initial release.","code":""}]
