[{"path":"https://janoleko.github.io/RTMBdist/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Jan-Ole Koslik Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://janoleko.github.io/RTMBdist/articles/Examples.html","id":"example-1-random-regression-with-non-gaussian-data","dir":"Articles","previous_headings":"","what":"Example 1: Random regression with non-Gaussian data","title":"Worked Examples","text":"first example chicken weight data set, already used RTMB Introduction vignette. fit random regression model, chick intercept slope parameters assumed normally distributed. However, instead assuming normal errors, assume observations given time chick follow Box-Cox Cole-Green (BCCG) distribution, allows skewness data. joint negative log-likelihood function structure RTMB vignette, normal likelihood replaced BCCG likelihood, hence also necessary parameter transformations. model can fitted constructing Laplace-approximated marginal log-likelihood function optimising using standard numerical optimiser. can use RTMB’s automatic simulation capabilities simulate fitted model run check whether Laplace approximation adequate. done simple call checkConsistency(). Lastly, can also automatically calculate quantile residuals via probability integral transform using oneStepPredict().  see model still great fit bit better Gaussian model.","code":"data(ChickWeight) parameters <- list(   mua=0,          # Mean slope   log_sda=1,      # log-Std of slopes   mub=0,          # Mean intercept   log_sdb=1,      # log-Std of intercepts   log_sigma=0,    # log-Scale of BCCG distribution   nu = 0.1,       # Skewness of BCCG distribution   a=rep(0, 50),   # Random slope by chick   b=rep(5, 50)    # Random intercept by chick ) nll_chick <- function(parms) {   getAll(ChickWeight, parms, warn=FALSE)   # Optional (enables extra RTMB features)   weight <- OBS(weight)   # Initialise joint negative log likelihood   nll <- 0   # Random slopes   sda <- exp(log_sda); ADREPORT(sda)   nll <- nll - sum(dnorm(a, mean=mua, sd=sda, log=TRUE))   # Random intercepts   sdb <- exp(log_sdb); ADREPORT(sdb)   nll <- nll - sum(dnorm(b, mean=mub, sd=sdb, log=TRUE))   # Data   predWeight <- exp(a[Chick] * Time + b[Chick])   sigma <- exp(log_sigma); ADREPORT(sigma)   nll <- nll - sum(dbccg(weight, mu=predWeight, sigma=sigma, nu=nu, log=TRUE))   # Get predicted weight uncertainties   ADREPORT(predWeight)   # Return   nll } obj_chick <- MakeADFun(nll_chick, parameters, random=c(\"a\", \"b\"), silent = TRUE) opt_chick <- nlminb(obj_chick$par, obj_chick$fn, obj_chick$gr) set.seed(1) checkConsistency(obj_chick) #> Parameters used for simulation: #>         mua     log_sda         mub     log_sdb   log_sigma          nu  #>  0.07799513 -3.86869405  3.80355961 -2.65747574 -2.32420504  3.44873713  #>  #> Test correct simulation (p.value): #> [1] 0.7383633 #> Simulation appears to be correct #>  #> Estimated parameter bias: #>           mua       log_sda           mub       log_sdb     log_sigma  #> -0.0001346800  0.0064958230 -0.0001147128 -0.0147141495  0.0042912804  #>            nu  #> -0.0836398603 osa_chick <- oneStepPredict(obj_chick, discrete=FALSE, trace=FALSE) qqnorm(osa_chick$res); abline(0,1)"},{"path":"https://janoleko.github.io/RTMBdist/articles/Examples.html","id":"example-2-non-standard-random-glm-for-count-data","dir":"Articles","previous_headings":"","what":"Example 2: Non-standard random GLM for count data","title":"Worked Examples","text":"second example InsectSprays data set. fit GLMM counts assumed follow generalised Poisson distribution, allowing overdispersion (compared standard Poisson distribution). model, simple include random effect spray type, account fact sprays effective others.","code":"data(InsectSprays) # Creating the model matrix X <- model.matrix(~ spray - 1, data = InsectSprays)  par <- list(   beta0 = log(mean(InsectSprays$count)),   beta = rep(0, length(levels(InsectSprays$spray))),   log_phi = log(1),   log_sigma = log(1) ) dat <- list(   count = InsectSprays$count,   spray = InsectSprays$spray,   X = X ) nll_insect <- function(par) {   getAll(par, dat, warn=FALSE)   count <- OBS(count)   # Random effect likelihood   sigma <- exp(log_sigma); ADREPORT(sigma)   nll <- - sum(dnorm(beta, 0, sigma, log = TRUE))   # Data likelihood   lambda <- exp(beta0 + as.numeric(X %*% beta)); ADREPORT(lambda)   phi <- exp(log_phi); ADREPORT(phi)   nll <- nll -sum(dgenpois(count, lambda, phi, log = TRUE))   nll } obj_insect <- MakeADFun(nll_insect, par, random = \"beta\", silent = TRUE) opt_insect <- nlminb(obj_insect$par, obj_insect$fn, obj_insect$gr)  # Checking if the Laplace approximation is adequate checkConsistency(obj_insect) #> Parameters used for simulation: #>      beta0    log_phi  log_sigma  #>  1.9751913 -3.8913794 -0.2221668  #>  #> Test correct simulation (p.value): #> [1] 0.605786 #> Simulation appears to be correct #>  #> Estimated parameter bias: #>       beta0     log_phi   log_sigma  #> -0.01672544  0.03395053 -0.00437216 # Check okay  # Calculating quantile residuals osa_insect <- oneStepPredict(obj_insect, method = \"oneStepGeneric\",                               discrete=TRUE, trace=FALSE) qqnorm(osa_insect$res); abline(0,1)"},{"path":"https://janoleko.github.io/RTMBdist/articles/Examples.html","id":"example-3-distributional-regression-with-penalised-splines","dir":"Articles","previous_headings":"","what":"Example 3: Distributional regression with penalised splines","title":"Worked Examples","text":"third example covers dutch boys BMI data set, part gamlss.data package. fit distributional regression model location, scale, skewness parameters Box-Cox power exponential (BCPE) distribution modelled smooth functions age using penalised splines. kurtosis parameter kept constant. start loading packages needed. use function make_matrices() package LaMa conveniently create design penalty matrices smooth functions. Internally, just interfaces mgcv. penalty matrix converted sparse matrix using Matrix package, work RTMB’s dgmrf() function. joint negative log-likelihood function computes covariate dependent location, scale, skewness parameters using design matrix regression coefficients. regression coefficients treated random effects multivariate normal distribution zero mean precision matrix scaled version penalty matrix, achieved calling dgmrf() . scaling/ smoothing parameters estimated restricted maximum likelihood (REML), achieved treating fixed effects integrating regression coefficients fixed effects using Laplace approximation. using REML, integrating parameters smoothing parameters log_lambda. model fitted constructing Laplace-approximated restricted log-likelihood function optimising . can access ADREPORT()ed quantities standard deviation using sdreport(). way, can easily plot estimated smooth functions confidence intervals conditional distribution BMI given age.","code":"library(gamlss.data)   # Data library(LaMa)          # Creating model matrices library(Matrix)        # Sparse matrices data(dbbmi) # Subset (just for speed here) set.seed(1) ind <- sample(1:nrow(dbbmi), 2000) dbbmi <- dbbmi[ind, ] k <- 10 # Basis dimension modmat <- make_matrices(~ s(age, bs=\"cs\"), data = dbbmi) X <- modmat$Z                              # Design matrix S <- Matrix(modmat$S[[1]], sparse = TRUE)  # Sparse penalty matrix nll_dbbmi <- function(par) {   getAll(par, dat, warn=FALSE)   bmi <- OBS(bmi)   # Calculating response parameters   mu <- exp(X %*% c(beta0_mu, beta_age_mu)); ADREPORT(mu) # Location   sigma <- exp(X %*% c(beta0_sigma, beta_age_sigma)); ADREPORT(sigma) # Scale   nu <- X %*% c(beta0_nu, beta_age_nu); ADREPORT(nu) # Skewness   tau <- exp(log_tau); ADREPORT(tau) # Kurtosis   # Data likelihood: Box-Cox power exponential distribution   nll <- - sum(dbcpe(bmi, mu, sigma, nu, tau, log=TRUE))   # Penalised splines as random effects: log likelihood / penalty   lambda <- exp(log_lambda); REPORT(lambda)   nll <- nll - dgmrf(beta_age_mu, 0, lambda[1] * S, log=TRUE)   nll <- nll - dgmrf(beta_age_sigma, 0, lambda[2] * S, log=TRUE)   nll <- nll - dgmrf(beta_age_nu, 0, lambda[3] * S, log=TRUE)   nll } par <- list(   beta0_mu = log(18), beta0_sigma = log(0.15),   beta0_nu = -1, beta_age_mu = rep(0, k-1),   beta_age_sigma = rep(0, k-1), beta_age_nu = rep(0, k-1),   log_tau = log(2),   log_lambda = log(rep(1e4, 3)) ) dat <- list(   bmi = dbbmi$bmi,   age = dbbmi$age,   X = X,   S = S ) # Restricted maximum likelihood (REML) - also integrating out fixed effects random <- names(par)[names(par) != \"log_lambda\"] obj_dbbmi <- MakeADFun(nll_dbbmi, par, random = random, silent = TRUE) opt_dbbmi <- nlminb(obj_dbbmi$par, obj_dbbmi$fn, obj_dbbmi$gr) sdr <- sdreport(obj_dbbmi, ignore.parm.uncertainty = TRUE) par <- as.list(sdr, \"Est\", report = TRUE) par_sd <- as.list(sdr, \"Std\", report = TRUE) age <- dbbmi$age ord <- order(age)  # Plotting estimated effects par(mfrow = c(1,3)) plot(age[ord], par$mu[ord], type = \"l\", lwd = 2, bty = \"n\", xlab = \"Age\", ylab = \"Mu\") polygon(c(age[ord], rev(age[ord])),         c(par$mu[ord] + 2*par_sd$mu[ord], rev(par$mu[ord] - 2*par_sd$mu[ord])),         col = \"#00000020\", border = \"NA\") plot(age[ord], par$sigma[ord], type = \"l\", lwd = 2, bty = \"n\", xlab = \"Age\", ylab = \"Sigma\") polygon(c(age[ord], rev(age[ord])),         c(par$sigma[ord] + 2*par_sd$sigma[ord], rev(par$sigma[ord] - 2*par_sd$sigma[ord])),         col = \"#00000020\", border = \"NA\") plot(age[ord], par$nu[ord], type = \"l\", lwd = 2, bty = \"n\", xlab = \"Age\", ylab = \"Nu\") polygon(c(age[ord], rev(age[ord])),         c(par$nu[ord] + 2*par_sd$nu[ord], rev(par$nu[ord] - 2*par_sd$nu[ord])),         col = \"#00000020\", border = \"NA\") # Plotting conditional distribution par(mfrow = c(1,1)) plot(dbbmi$age, dbbmi$bmi, pch = 16, col = \"#00000020\",      xlab = \"Age\", ylab = \"BMI\", bty = \"n\") lines(age[ord], par$mu[ord], lwd = 3, col = \"deepskyblue\")  # Compute quantiles (point estimates) par <- lapply(par, as.numeric) ps <- seq(0, 1, length = 8) ps[1] <- 0.005 # avoid 0 and 1 ps[length(ps)] <- 0.995 # avoid 0 and 1 for(p in ps) {   q <- qbcpe(p, par$mu, par$sigma, par$nu, par$tau) # quantiles   lines(age[ord], q[ord], col = \"deepskyblue\") } legend(\"topleft\", lwd = c(3, 1), col = \"deepskyblue\", legend = c(\"Mean\", \"Quantiles\"), bty = \"n\")"},{"path":"https://janoleko.github.io/RTMBdist/articles/Examples.html","id":"example-4-zero-inflation","dir":"Articles","previous_headings":"","what":"Example 4: Zero inflation","title":"Worked Examples","text":"example, look aep data set, containing data number inappropriate days spent hospital length stay patients admitted hospital Barcelona. data analysed Gange et al. (1996). fitted binomial logistic regression model well beta-binomial regression model, concluding beta-binomial model produced better fit. Due large number zeros data, also fit zero-inflated binomial model compare results. start fitting 2 binomial models. define one likelihood function fix zero probability 0 binomial model. find accounting zero-inflation somewhat changes estimated coefficients. Now also fit beta-binomial model. model, shape parameters modelled pi/θip_i / \\theta_i (1−pi)/θi(1-p_i) / \\theta_i, pip_i covariate-dependent probability observation ii θi\\theta_i parameter controlling overdispersion. parameter θi\\theta_i modelled function year , exactly Gange et al. (1996).","code":"library(gamlss.data) head(aep) #>   los noinap     loglos sex ward year age y.noinap y.failures #> 1  15      0  0.4054651   2    2   88   0        0         15 #> 2  42     20  1.4350845   2    1   88  18       20         22 #> 3   8      6 -0.2231436   1    1   88  19        6          2 #> 4   9      6 -0.1053605   1    2   88  23        6          3 #> 5   7      0 -0.3566749   1    2   88   2        0          7 #> 6  10      2  0.0000000   2    2   88  -8        2          8 # Defininig the model matrix for the model reported in Gange et al. (1996) X <- model.matrix(~ age + ward + loglos * year, data = aep)  # (zero-inflated) binomial likelihood nll_aep <- function(par) {   getAll(par, dat)   y <- OBS(y); size <- OBS(size)   prob <- plogis(X %*% beta); ADREPORT(prob) # linear predictor and link   zeroprob <- plogis(logit_zeroprob); ADREPORT(zeroprob)   - sum(dzibinom(y, size, prob, zeroprob, log = TRUE)) }  # Initial parameters beta_init <- c(-1, rep(0, ncol(X)-1)) names(beta_init) <- colnames(X) par <- list(beta = beta_init)  dat <- list(   y = aep$y[,1],   size = aep$los,   X = X )  # Fitting the binomial model (zeroprob fixed at 0) map <- list(logit_zeroprob = factor(NA)) # fixing at initial value par$logit_zeroprob <- qlogis(0) # set to zero obj_aep1 <- MakeADFun(nll_aep, par, silent = TRUE, map = map) opt_aep1 <- nlminb(obj_aep1$par, obj_aep1$fn, obj_aep1$gr)  # Fitting the zero-inflated binomial model, no parameter restrictions par$logit_zeroprob <- qlogis(1e-2) # more sensible initial value obj_aep2 <- MakeADFun(nll_aep, par, silent = TRUE) opt_aep2 <- nlminb(obj_aep2$par, obj_aep2$fn, obj_aep2$gr) #> Warning in nlminb(obj_aep2$par, obj_aep2$fn, obj_aep2$gr): NA/NaN function #> evaluation  # Reporting sdr_aep1 <- sdreport(obj_aep1) sdr_aep2 <- sdreport(obj_aep2)  beta1 <- as.list(sdr_aep1, \"Est\")$beta beta2 <- as.list(sdr_aep2, \"Est\")$beta (zeroprob2 <- as.list(sdr_aep2, \"Est\", report = TRUE)$zeroprob) #> [1] 0.4294577  round(rbind(beta1, beta2), 3) #>       (Intercept)   age  ward2  ward3 loglos year90 loglos:year90 #> beta1      -1.006 0.006 -0.468 -0.615  0.518  0.168        -0.204 #> beta2       0.058 0.009 -0.622 -0.873  0.235 -0.294        -0.087 # Beta-binomial likelihood nll_aep2 <- function(par) {   getAll(par, dat)   y <- OBS(y); size <- OBS(size)   theta <- plogis(X_theta %*% beta_theta); ADREPORT(theta) # overdispersion parameter   prob <- plogis(X %*% beta); ADREPORT(prob) # linear predictor and link   - sum(dbetabinom(y, size, prob / theta, (1-prob) / theta, log = TRUE)) }  # Design matrices X <- model.matrix(~ ward + loglos + year, data = aep) X_theta <- model.matrix(~ year, data = aep)  # Initial parameters beta <- c(-1, rep(0, ncol(X)-1)); names(beta) <- colnames(X) beta_theta <- c(1, 0); names(beta_theta) <- colnames(X_theta)  par <- list(beta = beta, beta_theta = beta_theta) dat <- list(   y = aep$y[,1],   size = aep$los,   X = X,    X_theta = X_theta )  obj_aep3 <- MakeADFun(nll_aep2, par, silent = TRUE) opt_aep3 <- nlminb(obj_aep3$par, obj_aep3$fn, obj_aep3$gr)  sdr_aep3 <- sdreport(obj_aep3)  beta3 <- as.list(sdr_aep3, \"Est\")$beta  round(beta3, 3) #> (Intercept)       ward2       ward3      loglos      year90  #>      -1.126      -0.320      -0.606       0.537       0.295"},{"path":"https://janoleko.github.io/RTMBdist/articles/Examples.html","id":"example-5-copulas","dir":"Articles","previous_headings":"","what":"Example 5: Copulas","title":"Worked Examples","text":"example, modelling faithful data set. contains measurements waiting time eruptions duration eruption Old Faithful geyser Yellowstone National Park, Wyoming, USA. fit mixture two bivariate distributions, component normal marginal distributions Clayton copula model dependence two variables. Specifying mixture likelihood using dcopula() cclayton() components straightforward, ’s just imporant confuse mixture components dimensions. fit model usual, now using reporting easily extract estimated parameters natural scale: can plot result:","code":"data(faithful) nll_copula <- function(par) {   getAll(par, faithful)   REPORT(mu1); REPORT(mu2)   sigma1 <- exp(log_sigma1); REPORT(sigma1) # marginal sds component 1   sigma2 <- exp(log_sigma2); REPORT(sigma2) # marginal sds component 2   theta <- exp(log_theta); REPORT(theta) # dependence parameters   alpha <- exp(log_alpha); REPORT(alpha) # mixture weights   # Marginal densities   # Margin 1: Waiting   d1 <- cbind(dnorm(waiting, mu1[1], sigma1[1], log=TRUE), # Component 1               dnorm(waiting, mu2[1], sigma2[1], log=TRUE)) # Component 2   # Margin 2: Eruptions   d2 <- cbind(dnorm(eruptions, mu1[2], sigma1[2], log=TRUE), # Component 1               dnorm(eruptions, mu2[2], sigma2[2], log=TRUE)) # Component 2   # Marginal CDFs   # Margin 1: Waiting   p1 <- cbind(pnorm(waiting, mu1[1], sigma1[1]), # Component 1               pnorm(waiting, mu2[1], sigma2[1])) # Component 2   # Margin 2: Eruptions   p2 <- cbind(pnorm(eruptions, mu1[2], sigma1[2]), # component 1               pnorm(eruptions, mu2[2], sigma2[2])) # component 2      # Computing mixture likelihood:   ll1 <- dcopula(d1[,1], d2[,1], p1[,1], p2[,1], cclayton(theta[1]), log=TRUE) # f1(x,y)   ll2 <- dcopula(d1[,2], d2[,2], p1[,2], p2[,2], cclayton(theta[2]), log=TRUE) # f2(x,y)   # alpha * f1(x,y) + (1-alpha) * f2(x,y) on log scale for each obervation   ll <- logspace_add(log_alpha + ll1, log1p(-alpha) + ll2)    - sum(ll) # returning negative sum } # Initial parameters par <- list(   mu1 = c(55, 2), mu2 = c(80, 4),   log_sigma1 = log(c(10, 1)), log_sigma2 = log(c(10, 1)),   log_theta = log(c(0.5, 0.5)),   log_alpha = log(0.5) )  obj_copula <- MakeADFun(nll_copula, par, silent = TRUE) opt_copula <- nlminb(obj_copula$par, obj_copula$fn, obj_copula$gr)  mod_copula <- obj_copula$report()  # Extract transformed parameters mu1    <- mod_copula$mu1 mu2    <- mod_copula$mu2 sigma1 <- mod_copula$sigma1 sigma2 <- mod_copula$sigma2 theta  <- mod_copula$theta alpha  <- mod_copula$alpha # Scatterplot plot(faithful$waiting, faithful$eruptions, pch = 19, cex = 0.5,      xlab = \"Waiting time\", ylab = \"Eruption time\")  # Grid for evaluation xseq <- seq(min(faithful$waiting), max(faithful$waiting), length.out = 80) yseq <- seq(min(faithful$eruptions), max(faithful$eruptions), length.out = 80)  # Evaluate mixture density on grid dens <- outer(xseq, yseq, function(x,y){   d1c1 <- dnorm(x, mu1[1], sigma1[1])   d2c1 <- dnorm(y, mu1[2], sigma1[2])   p1c1 <- pnorm(x, mu1[1], sigma1[1])   p2c1 <- pnorm(y, mu1[2], sigma1[2])   f1 <- alpha * dcopula(d1c1, d2c1, p1c1, p2c1, cclayton(theta[1]))   d1c2 <- dnorm(x, mu2[1], sigma2[1])   d2c2 <- dnorm(y, mu2[2], sigma2[2])   p1c2 <- pnorm(x, mu2[1], sigma2[1])   p2c2 <- pnorm(y, mu2[2], sigma2[2])   f2 <- (1-alpha) * dcopula(d1c2, d2c2, p1c2, p2c2, cclayton(theta[2]))   f1 + f2 })  # Add contours contour(xseq, yseq, dens, add = TRUE, nlevels = 8,         drawlabels = FALSE, col = \"deepskyblue\", lwd = 2)"},{"path":"https://janoleko.github.io/RTMBdist/articles/distlist.html","id":"continuous-distributions","dir":"Articles","previous_headings":"","what":"Continuous distributions","title":"List of distributions","text":"beta2(mu, phi): Beta distribution reparameterised mean mu precision phi bcpe(mu, sigma, nu, tau): Box-Cox power exponential distribution parameterised location mu, scale sigma, nu, tau bccg(mu, sigma, nu): Box-Cox Cole Green distribution parameterised location mu, scale sigma, skewness nu bct(mu, sigma, nu, tau): Box-Cox t-distribution parameterised location mu, scale sigma, skewness nu, degrees freedom tau exgauss(mu, sigma, lambda): Exponentially modified Gaussian distribution parameterised location mu, scale sigma rate lambda foldnorm(mu, sigma): Folded normal distribution parameterised location mu scale sigma gamma2(mean, sd): Gamma distribution reparameterised mean standard deviation gumbel(location, scale): Gumbel distribution parameterised location scale invgauss(mean, shape): Inverse Gaussian distribution parameterised mean shape laplace(mu, b): Laplace distribution parameterised location mu scale b oibeta(shape1, shape2, oneprob): One-inflated beta distribution parameterised shape parameters shape1, shape2 one-probability oneprob oibeta2(mu, phi, oneprob): One-inflated beta distribution reparameterised mean mu, precision phi, one-probability oneprob pareto(mu): Pareto distribution parameterised mu powerexp(mu, sigma, nu): Power exponential distribution parameterised mean mu, standard deviation sigma shape nu powerexp2(mu, sigma, nu): Power exponential distribution reparameterised location mu, scale sigma shape nu skewnorm(xi, omega, alpha): Skew normal distribution parameterised location xi, scale omega skewness alpha skewnorm2(mean, sd, alpha): Skew normal distribution reparameterised mean, standard deviation skewness alpha skewt(mu, sigma, skew, df): Skew t-distribution parameterised location mu, scale sigma, skewness skew degrees freedom df truncnorm(mean, sd, min, max): Truncated normal distribution parameterised mean, standard deviation, lower bound min upper bound max trunct(df, min, max): Truncated t-distribution parameterised degrees freedom df, lower bound min upper bound max trunct2(df, mu, sigma, min, max): Truncated t-distribution parameterised location mu, scale sigma, degrees freedom df, lower bound min upper bound max t2(mu, sigma, df): Non-central scaled t-distribution parameterised location mu, scale sigma degrees freedom df vm(mu, kappa): Von Mises distribution parameterised mean direction mu concentration kappa wrpcauchy(mu, rho): Wrapped Cauchy distribution parameterised mean direction mu concentration rho zibeta(shape1, shape2, zeroprob): Zero-inflated beta distribution parameterised shape parameters shape1, shape2 zero-probability zeroprob zibeta2(mu, phi, zeroprob): Zero-inflated beta distribution reparameterised mean mu, precision phi, zero-probability zeroprob zigamma(shape, scale, zeroprob): Zero-inflated gamma distribution parameterised shape scale, zero-probability zeroprob zigamma2(mean, sd, zeroprob): Zero-inflated gamma distribution reparameterised mean, standard deviation zero-probability zeroprob ziinvgauss(mean, shape, zeroprob): Zero-inflated inverse Gaussian distribution parameterised mean, shape zero-probability zeroprob zoibeta(shape1, shape2, zeroprob, oneprob): Zero- one-inflated beta distribution parameterised shape parameters shape1, shape2, zero-probability zeroprob one-probability oneprob zoibeta2(mu, phi, zeroprob, oneprob): Zero- one-inflated beta distribution reparameterised mean mu, precision phi, zero-probability zeroprob one-probability oneprob","code":""},{"path":"https://janoleko.github.io/RTMBdist/articles/distlist.html","id":"discrete-distributions","dir":"Articles","previous_headings":"","what":"Discrete distributions","title":"List of distributions","text":"betabinom(size, shape1, shape2): Beta-binomial distribution parameterised size size, shape parameters shape1 shape2 genpois(lambda, phi): Generalised Poisson distribution parameterised mean lambda dispersion phi nbinom2(mu, size): Negative binomial distribution reparameterised mean mu size size zibinom(size, prob, zeroprob): Zero-inflated binomial distribution parameterised size size, success probability prob zero-probability zeroprob zinbinom(size, prob, zeroprob): Zero-inflated negative binomial distribution parameterised size size, success probability prob zero-probability zeroprob zinbinom2(mu, size, zeroprob): Zero-inflated negative binomial distribution reparameterised mean mu, size size zero-probability zeroprob zipois(lambda, zeroprob): Zero-inflated Poisson distribution parameterised rate lambda zero-probability zeroprob","code":""},{"path":"https://janoleko.github.io/RTMBdist/articles/distlist.html","id":"multivariate-distributions","dir":"Articles","previous_headings":"","what":"Multivariate distributions","title":"List of distributions","text":"dirichlet(alpha): Dirichlet distribution parameterised concentration parameter vector alpha dirmult(size, alpha): Dirichlet-multinomial distribution parameterised size concentration parameters alpha mvt(mu, Sigma, df): Multivariate t-distribution parameterised location mu, scale matrix Sigma degrees freedom df vmf(mu, kappa): Multivariate von Mises-Fisher distribution parameterised unit mean vector mu concentration kappa vmf2(theta): Multivariate von Mises-Fisher distribution parameterised parameter theta equal unit mean vector mu times concentration scalar kappa","code":""},{"path":"https://janoleko.github.io/RTMBdist/articles/distlist.html","id":"copulas","dir":"Articles","previous_headings":"","what":"Copulas","title":"List of distributions","text":"Bivariate copulas can implemented modular way using dcopula function together one copula constructors . Available copula constructors : cgaussian(rho) (Gaussian copula) cclayton(theta) (Clayton copula) cgumbel(theta) (Gumbel copula) cfrank(theta) (Frank copula)","code":""},{"path":"https://janoleko.github.io/RTMBdist/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jan-Ole Koslik. Author, maintainer.","code":""},{"path":"https://janoleko.github.io/RTMBdist/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Koslik J (2025). RTMBdist: Distributions compatible automatic differentiation RTMB. R package version 0.0.0.9000, https://janoleko.github.io/RTMBdist/.","code":"@Manual{,   title = {RTMBdist: Distributions compatible with automatic differentiation by RTMB},   author = {Jan-Ole Koslik},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://janoleko.github.io/RTMBdist/}, }"},{"path":"https://janoleko.github.io/RTMBdist/index.html","id":"rtmbdist--ad-compatible-distribution-library-","dir":"","previous_headings":"","what":"Distributions compatible with automatic differentiation by RTMB","title":"Distributions compatible with automatic differentiation by RTMB","text":"RTMB package enables powerful flexible statistical modelling rich random effect structures using automatic differentiation (AD). However, built-support probability distributions limited standard cases. RTMBdist fills gap providing collection non-standard, AD-compatible distributions, extending range models can implemented estimated RTMB. distributions implemented RTMBdist allow automatic simulation residual calculation RTMB. full list distributions currently available given List distributions vignette. Feel free contribute!","code":""},{"path":"https://janoleko.github.io/RTMBdist/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Distributions compatible with automatic differentiation by RTMB","text":"can install development version RTMBdist GitHub :","code":"remotes::install_github(\"janoleko/RTMBdist\")"},{"path":"https://janoleko.github.io/RTMBdist/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Distributions compatible with automatic differentiation by RTMB","text":"Let’s numerical maximum likelihood estimation gumbel distribution: magic RTMB, can also immediately simulate new data fitted model calculate residuals:","code":"library(RTMBdist) # simulate data x <- rgumbel(100, location = 5, scale = 2)  # negative log-likelihood function nll <- function(par) {   x <- OBS(x) # mark x as the response   loc <- par[1]; ADREPORT(loc)   scale <- exp(par[2]); ADREPORT(scale)   -sum(dgumbel(x, loc, scale, log = TRUE)) }  # RTMB AD object obj <- MakeADFun(nll, c(5, log(2)), silent = TRUE)  # model fitting using AD gradient opt <- nlminb(obj$par, obj$fn, obj$gr)  # model summary summary(sdreport(obj)) #>        Estimate Std. Error #> par   5.0015427 0.20659355 #> par   0.6732893 0.07663174 #> loc   5.0015427 0.20659355 #> scale 1.9606760 0.15025002 # simulate new data x_new <- obj$simulate()$x  # calculate residuals osa <- oneStepPredict(obj, method = \"cdf\", trace = FALSE) qqnorm(osa$res); abline(0, 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/bccg.html","id":null,"dir":"Reference","previous_headings":"","what":"Box–Cox Cole and Green distribution (BCCG) — bccg","title":"Box–Cox Cole and Green distribution (BCCG) — bccg","text":"Density, distribution function, quantile function, random generation Box–Cox Cole Green distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/bccg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Box–Cox Cole and Green distribution (BCCG) — bccg","text":"","code":"dbccg(x, mu = 1, sigma = 0.1, nu = 1, log = FALSE)  pbccg(q, mu = 1, sigma = 0.1, nu = 1, lower.tail = TRUE, log.p = FALSE)  qbccg(p, mu = 1, sigma = 0.1, nu = 1, lower.tail = TRUE, log.p = FALSE)  rbccg(n, mu = 1, sigma = 0.1, nu = 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/bccg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Box–Cox Cole and Green distribution (BCCG) — bccg","text":"x, q vector quantiles mu location parameter, must positive. sigma scale parameter, must positive. nu skewness parameter (real). log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE (default), probabilities \\(P[X \\le x]\\), otherwise \\(P[X > x]\\). p vector probabilities n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/bccg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Box–Cox Cole and Green distribution (BCCG) — bccg","text":"dbccg gives density, pbccg gives distribution function, qbccg gives quantile function, rbccg generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/bccg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Box–Cox Cole and Green distribution (BCCG) — bccg","text":"implementation dbccg pbccg allows automatic differentiation RTMB functions imported gamlss.dist package. See gamlss.dist::BCCG details.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/bccg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Box–Cox Cole and Green distribution (BCCG) — bccg","text":"Rigby, R. ., Stasinopoulos, D. M., Heller, G. Z., De Bastiani, F. (2019) Distributions modeling location, scale, shape: Using GAMLSS R, Chapman Hall/CRC, doi:10.1201/9780429298547. older version can found https://www.gamlss.com/.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/bccg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Box–Cox Cole and Green distribution (BCCG) — bccg","text":"","code":"x <- rbccg(5, mu = 10, sigma = 0.2, nu = 0.5) d <- dbccg(x, mu = 10, sigma = 0.2, nu = 0.5) p <- pbccg(x, mu = 10, sigma = 0.2, nu = 0.5) q <- qbccg(p, mu = 10, sigma = 0.2, nu = 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/bcpe.html","id":null,"dir":"Reference","previous_headings":"","what":"Box-Cox Power Exponential distribution (BCPE) — bcpe","title":"Box-Cox Power Exponential distribution (BCPE) — bcpe","text":"Density, distribution function, quantile function, random generation Box-Cox Power Exponential distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/bcpe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Box-Cox Power Exponential distribution (BCPE) — bcpe","text":"","code":"dbcpe(x, mu = 5, sigma = 0.1, nu = 1, tau = 2, log = FALSE)  pbcpe(q, mu = 5, sigma = 0.1, nu = 1, tau = 2, lower.tail = TRUE, log.p = FALSE)  qbcpe(p, mu = 5, sigma = 0.1, nu = 1, tau = 2, lower.tail = TRUE, log.p = FALSE)  rbcpe(n, mu = 5, sigma = 0.1, nu = 1, tau = 2)"},{"path":"https://janoleko.github.io/RTMBdist/reference/bcpe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Box-Cox Power Exponential distribution (BCPE) — bcpe","text":"x, q vector quantiles mu location parameter, must positive. sigma scale parameter, must positive. nu vector nu parameter values. tau vector tau parameter values, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE (default), probabilities \\(P[X \\le x]\\), otherwise \\(P[X > x]\\). p vector probabilities n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/bcpe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Box-Cox Power Exponential distribution (BCPE) — bcpe","text":"dbcpe gives density, pbcpe gives distribution function, qbcpe gives quantile function, rbcpe generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/bcpe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Box-Cox Power Exponential distribution (BCPE) — bcpe","text":"implementation dbcpe pbcpe allows automatic differentiation RTMB functions imported gamlss.dist package. See gamlss.dist::BCPE details.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/bcpe.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Box-Cox Power Exponential distribution (BCPE) — bcpe","text":"Rigby, R. ., Stasinopoulos, D. M., Heller, G. Z., De Bastiani, F. (2019) Distributions modeling location, scale, shape: Using GAMLSS R, Chapman Hall/CRC, doi:10.1201/9780429298547. older version can found https://www.gamlss.com/.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/bcpe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Box-Cox Power Exponential distribution (BCPE) — bcpe","text":"","code":"x <- rbcpe(1, mu = 5, sigma = 0.1, nu = 1, tau = 1) d <- dbcpe(x, mu = 5, sigma = 0.1, nu = 1, tau = 1) p <- pbcpe(x, mu = 5, sigma = 0.1, nu = 1, tau = 1) q <- qbcpe(p, mu = 5, sigma = 0.1, nu = 1, tau = 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/bct.html","id":null,"dir":"Reference","previous_headings":"","what":"Box–Cox t distribution (BCT) — bct","title":"Box–Cox t distribution (BCT) — bct","text":"Density, distribution function, quantile function, random generation Box–Cox t distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/bct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Box–Cox t distribution (BCT) — bct","text":"","code":"dbct(x, mu = 5, sigma = 0.1, nu = 1, tau = 2, log = FALSE)  pbct(q, mu = 5, sigma = 0.1, nu = 1, tau = 2, lower.tail = TRUE, log.p = FALSE)  qbct(p, mu = 5, sigma = 0.1, nu = 1, tau = 2, lower.tail = TRUE, log.p = FALSE)  rbct(n, mu = 5, sigma = 0.1, nu = 1, tau = 2)"},{"path":"https://janoleko.github.io/RTMBdist/reference/bct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Box–Cox t distribution (BCT) — bct","text":"x, q vector quantiles mu location parameter, must positive. sigma scale parameter, must positive. nu skewness parameter (real). tau degrees freedom, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE (default), probabilities \\(P[X \\le x]\\), otherwise \\(P[X > x]\\). p vector probabilities n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/bct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Box–Cox t distribution (BCT) — bct","text":"dbct gives density, pbct gives distribution function, qbct gives quantile function, rbct generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/bct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Box–Cox t distribution (BCT) — bct","text":"implementation dbct pbct allows automatic differentiation RTMB functions imported gamlss.dist package. See gamlss.dist::BCT details.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/bct.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Box–Cox t distribution (BCT) — bct","text":"Rigby, R. ., Stasinopoulos, D. M., Heller, G. Z., De Bastiani, F. (2019) Distributions modeling location, scale, shape: Using GAMLSS R, Chapman Hall/CRC, doi:10.1201/9780429298547. older version can found https://www.gamlss.com/.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/bct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Box–Cox t distribution (BCT) — bct","text":"","code":"x <- rbct(1, mu = 10, sigma = 0.2, nu = 0.5, tau = 4) d <- dbct(x, mu = 10, sigma = 0.2, nu = 0.5, tau = 4) p <- pbct(x, mu = 10, sigma = 0.2, nu = 0.5, tau = 4) q <- qbct(p, mu = 10, sigma = 0.2, nu = 0.5, tau = 4)"},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":null,"dir":"Reference","previous_headings":"","what":"Reparameterised beta distribution — beta2","title":"Reparameterised beta distribution — beta2","text":"Density, distribution function, quantile function, random generation beta distribution reparameterised terms mean concentration.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reparameterised beta distribution — beta2","text":"","code":"dbeta(x, shape1, shape2, log = FALSE, eps = 0)  dbeta2(x, mu, phi, log = FALSE, eps = 0)  pbeta2(q, mu, phi, lower.tail = TRUE, log.p = FALSE)  qbeta2(p, mu, phi, lower.tail = TRUE, log.p = FALSE)  rbeta2(n, mu, phi)"},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reparameterised beta distribution — beta2","text":"x, q vector quantiles shape1, shape2 non-negative parameters log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). eps internal use , change. mu mean parameter, must interval 0 1. phi concentration parameter, must positive. lower.tail logical; TRUE (default), probabilities \\(P[X \\leq x]\\), otherwise \\(P[X > x]\\). p vector probabilities n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reparameterised beta distribution — beta2","text":"dbeta2 gives density, pbeta2 gives distribution function, qbeta2 gives quantile function, rbeta2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reparameterised beta distribution — beta2","text":"implementation allows automatic differentiation RTMB. Currently, dbeta masks RTMB::dbeta latter numerically unstable gradient.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reparameterised beta distribution — beta2","text":"","code":"set.seed(123) x <- rbeta2(1, 0.5, 1) d <- dbeta2(x, 0.5, 1) p <- pbeta2(x, 0.5, 1) q <- qbeta2(p, 0.5, 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/betabinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Beta-binomial distribution — betabinom","title":"Beta-binomial distribution — betabinom","text":"Density random generation beta-binomial distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/betabinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beta-binomial distribution — betabinom","text":"","code":"dbetabinom(x, size, shape1, shape2, log = FALSE)  rbetabinom(n, size, shape1, shape2)"},{"path":"https://janoleko.github.io/RTMBdist/reference/betabinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beta-binomial distribution — betabinom","text":"x vector non-negative counts. size vector total counts (number trials). Needs >= x. shape1 positive shape parameter 1 Beta prior. shape2 positive shape parameter 2 Beta prior. log logical; TRUE, densities returned log scale. n number random values return (rbetabinom).","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/betabinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Beta-binomial distribution — betabinom","text":"dbetabinom gives density rbetabinom generates random samples.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/betabinom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Beta-binomial distribution — betabinom","text":"implementation dbetabinom allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/betabinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beta-binomial distribution — betabinom","text":"","code":"set.seed(123) x <- rbetabinom(1, 10, 2, 5) d <- dbetabinom(x, 10, 2, 5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/cclayton.html","id":null,"dir":"Reference","previous_headings":"","what":"Clayton copula constructor — cclayton","title":"Clayton copula constructor — cclayton","text":"Returns function computes log density bivariate Clayton copula, intended used dcopula.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/cclayton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clayton copula constructor — cclayton","text":"","code":"cclayton(theta)"},{"path":"https://janoleko.github.io/RTMBdist/reference/cclayton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clayton copula constructor — cclayton","text":"theta Positive dependence parameter (\\(\\theta > 0\\)).","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/cclayton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clayton copula constructor — cclayton","text":"function two arguments (u,v) returning log copula density.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/cclayton.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clayton copula constructor — cclayton","text":"Clayton copula density $$ c(u,v;\\theta) = (1+\\theta) (uv)^{-(1+\\theta)} \\left( u^{-\\theta} + v^{-\\theta} - 1 \\right)^{-(2\\theta+1)/\\theta}, \\quad \\theta > 0. $$","code":""},{"path":[]},{"path":"https://janoleko.github.io/RTMBdist/reference/cclayton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clayton copula constructor — cclayton","text":"","code":"x <- c(0.5, 1); y <- c(0.2, 0.8) d1 <- dnorm(x, 1, log = TRUE); d2 <- dbeta(y, 2, 1, log = TRUE) p1 <- pnorm(x, 1); p2 <- pbeta(y, 2, 1) dcopula(d1, d2, p1, p2, copula = cclayton(2), log = TRUE) #> [1] -3.8093660 -0.1671136"},{"path":"https://janoleko.github.io/RTMBdist/reference/cfrank.html","id":null,"dir":"Reference","previous_headings":"","what":"Frank copula constructor — cfrank","title":"Frank copula constructor — cfrank","text":"Returns function computing log density bivariate Frank copula, intended used dcopula.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/cfrank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frank copula constructor — cfrank","text":"","code":"cfrank(theta)"},{"path":"https://janoleko.github.io/RTMBdist/reference/cfrank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frank copula constructor — cfrank","text":"theta Dependence parameter (\\(\\theta = 0\\)).","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/cfrank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Frank copula constructor — cfrank","text":"Function two arguments (u,v) returning log copula density.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/cfrank.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Frank copula constructor — cfrank","text":"Frank copula density $$ c(u,v;\\theta) = \\frac{\\theta (1-e^{-\\theta}) e^{-\\theta(u+v)}} {\\left[(e^{-\\theta u}-1)(e^{-\\theta v}-1) + (1 - e^{-\\theta}) \\right]^2}, \\quad \\theta \\ne 0. $$","code":""},{"path":[]},{"path":"https://janoleko.github.io/RTMBdist/reference/cfrank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Frank copula constructor — cfrank","text":"","code":"x <- c(0.5, 1); y <- c(1, 2) d1 <- dnorm(x, 1, log = TRUE); d2 <- dexp(y, 2, log = TRUE) p1 <- pnorm(x, 1); p2 <- pexp(y, 2) dcopula(d1, d2, p1, p2, copula = cfrank(2), log = TRUE) #> [1] -2.705857 -4.370568"},{"path":"https://janoleko.github.io/RTMBdist/reference/cgaussian.html","id":null,"dir":"Reference","previous_headings":"","what":"Gaussian copula constructor — cgaussian","title":"Gaussian copula constructor — cgaussian","text":"Returns function computing log density bivariate Gaussian copula, intended used dcopula.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/cgaussian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gaussian copula constructor — cgaussian","text":"","code":"cgaussian(rho = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/cgaussian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gaussian copula constructor — cgaussian","text":"rho Correlation parameter (\\(-1 < rho < 1\\)).","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/cgaussian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gaussian copula constructor — cgaussian","text":"Function two arguments (u,v) returning log copula density. Gaussian copula density $$ c(u,v;\\rho) = \\frac{1}{\\sqrt{1-\\rho^2}} \\exp\\left\\{-\\frac{1}{2(1-\\rho^2)} (z_1^2 - 2 \\rho z_1 z_2 + z_2^2) + \\frac{1}{2}(z_1^2 + z_2^2) \\right\\}, $$ \\(z_1 = \\Phi^{-1}(u)\\), \\(z_2 = \\Phi^{-1}(v)\\), \\(-1 < \\rho < 1\\).","code":""},{"path":[]},{"path":"https://janoleko.github.io/RTMBdist/reference/cgaussian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gaussian copula constructor — cgaussian","text":"","code":"x <- c(0.5, 1); y <- c(1, 2) d1 <- dnorm(x, 1, log = TRUE); d2 <- dexp(y, 2, log = TRUE) p1 <- pnorm(x, 1); p2 <- pexp(y, 2) dcopula(d1  , d2, p1, p2, copula = cgaussian(0.5), log = TRUE) #> [1] -2.818014 -4.809862"},{"path":"https://janoleko.github.io/RTMBdist/reference/cgumbel.html","id":null,"dir":"Reference","previous_headings":"","what":"Gumbel copula constructor — cgumbel","title":"Gumbel copula constructor — cgumbel","text":"Returns function computes log density bivariate Gumbel copula, intended used dcopula.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/cgumbel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gumbel copula constructor — cgumbel","text":"","code":"cgumbel(theta)"},{"path":"https://janoleko.github.io/RTMBdist/reference/cgumbel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gumbel copula constructor — cgumbel","text":"theta Dependence parameter (\\(\\theta >= 1\\)).","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/cgumbel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gumbel copula constructor — cgumbel","text":"function two arguments (u,v) returning log copula density.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/cgumbel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gumbel copula constructor — cgumbel","text":"Gumbel copula density $$ c(u,v;\\theta) = \\exp\\Big[-\\big((-\\log u)^\\theta + (-\\log v)^\\theta\\big)^{1/\\theta}\\Big] \\cdot h(u,v;\\theta), $$ \\(h(u,v;\\theta)\\) contains derivative terms ensuring function density.","code":""},{"path":[]},{"path":"https://janoleko.github.io/RTMBdist/reference/cgumbel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gumbel copula constructor — cgumbel","text":"","code":"x <- c(0.5, 1); y <- c(0.2, 0.4) d1 <- dnorm(x, 1, log = TRUE); d2 <- dbeta(y, 2, 1, log = TRUE) p1 <- pnorm(x, 1); p2 <- pbeta(y, 2, 1) dcopula(d1, d2, p1, p2, copula = cgumbel(1.5), log = TRUE) #> [1] -1.807264 -1.274899"},{"path":"https://janoleko.github.io/RTMBdist/reference/dcopula.html","id":null,"dir":"Reference","previous_headings":"","what":"Joint density under a bivariate copula — dcopula","title":"Joint density under a bivariate copula — dcopula","text":"Computes joint density (log-density) bivariate distribution constructed two arbitrary margins combined specified copula.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dcopula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Joint density under a bivariate copula — dcopula","text":"","code":"dcopula(d1, d2, p1, p2, copula = cgaussian(0), log = FALSE)"},{"path":"https://janoleko.github.io/RTMBdist/reference/dcopula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Joint density under a bivariate copula — dcopula","text":"d1, d2 Marginal density values. log = TRUE, supply log-density. log = FALSE, supply raw density. p1, p2 Marginal CDF values. Need supplied log scale. copula function two arguments (u, v) returning log copula density \\(\\log c(u,v)\\). can either construct use copula constructors available (see details) log Logical; TRUE, return log joint density. case, d1 d2 must log scale.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dcopula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Joint density under a bivariate copula — dcopula","text":"Joint density (log-density) bivariate copula.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dcopula.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Joint density under a bivariate copula — dcopula","text":"joint density $$f(x,y) = c(F_1(x), F_2(y)) \\, f_1(x) f_2(y),$$ \\(F_i\\) marginal CDFs, \\(f_i\\) marginal densities, \\(c\\) copula density. marginal densities d1, d2 CDFs p1, p2 must differentiable automatic differentiation (AD) work. Available copula constructors : cgaussian (Gaussian copula) cclayton (Clayton copula) cgumbel (Gumbel copula) cfrank (Frank copula)","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dcopula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Joint density under a bivariate copula — dcopula","text":"","code":"# Normal + Exponential margins with Gaussian copula x <- c(0.5, 1); y <- c(1, 2) d1 <- dnorm(x, 1, log = TRUE); d2 <- dexp(y, 2, log = TRUE) p1 <- pnorm(x, 1); p2 <- pexp(y, 2) dcopula(d1, d2, p1, p2, copula = cgaussian(0.5), log = TRUE) #> [1] -2.818014 -4.809862  # Normal + Beta margins with Clayton copula x <- c(0.5, 1); y <- c(0.2, 0.8) d1 <- dnorm(x, 1, log = TRUE); d2 <- dbeta(y, 2, 1, log = TRUE) p1 <- pnorm(x, 1); p2 <- pbeta(y, 2, 1) dcopula(d1, d2, p1, p2, copula = cclayton(2), log = TRUE) #> [1] -3.8093660 -0.1671136  # Normal + Beta margins with Gumbel copula x <- c(0.5, 1); y <- c(0.2, 0.4) d1 <- dnorm(x, 1, log = TRUE); d2 <- dbeta(y, 2, 1, log = TRUE) p1 <- pnorm(x, 1); p2 <- pbeta(y, 2, 1) dcopula(d1, d2, p1, p2, copula = cgumbel(1.5), log = TRUE) #> [1] -1.807264 -1.274899  # Normal + Exponential margins with Frank copula x <- c(0.5, 1); y <- c(1, 2) d1 <- dnorm(x, 1, log = TRUE); d2 <- dexp(y, 2, log = TRUE) p1 <- pnorm(x, 1); p2 <- pexp(y, 2) dcopula(d1, d2, p1, p2, copula = cfrank(2), log = TRUE) #> [1] -2.705857 -4.370568"},{"path":"https://janoleko.github.io/RTMBdist/reference/dirichlet.html","id":null,"dir":"Reference","previous_headings":"","what":"Dirichlet distribution — dirichlet","title":"Dirichlet distribution — dirichlet","text":"Density random generation Dirichlet distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dirichlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dirichlet distribution — dirichlet","text":"","code":"ddirichlet(x, alpha, log = FALSE)  rdirichlet(n, alpha)"},{"path":"https://janoleko.github.io/RTMBdist/reference/dirichlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dirichlet distribution — dirichlet","text":"x vector matrix quantiles. x vector, needs sum one. x matrix, row sum one. alpha vector matrix positive shape parameters log logical; TRUE, densities \\(p\\) returned \\(\\log(p)\\). n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dirichlet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dirichlet distribution — dirichlet","text":"ddirichlet gives density, rdirichlet generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dirichlet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dirichlet distribution — dirichlet","text":"implementation ddirichlet allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dirichlet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dirichlet distribution — dirichlet","text":"","code":"# single alpha alpha <- c(1,2,3) x <- rdirichlet(1, alpha) d <- ddirichlet(x, alpha) # vectorised over alpha alpha <- rbind(alpha, 2*alpha) x <- rdirichlet(2, alpha)"},{"path":"https://janoleko.github.io/RTMBdist/reference/dirmult.html","id":null,"dir":"Reference","previous_headings":"","what":"Dirichlet-multinomial distribution — dirmult","title":"Dirichlet-multinomial distribution — dirmult","text":"Density random generation Dirichlet-multinomial distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dirmult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dirichlet-multinomial distribution — dirmult","text":"","code":"ddirmult(x, size, alpha, log = FALSE)  rdirmult(n, size, alpha)"},{"path":"https://janoleko.github.io/RTMBdist/reference/dirmult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dirichlet-multinomial distribution — dirmult","text":"x vector matrix non-negative counts, rows observations columns categories. size vector total counts observation. Needs match row sums x. alpha vector matrix positive shape parameters log logical; TRUE, densities \\(p\\) returned \\(\\log(p)\\). n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dirmult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dirichlet-multinomial distribution — dirmult","text":"ddirmult gives density rdirmult generates random samples.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dirmult.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dirichlet-multinomial distribution — dirmult","text":"implementation ddirmult allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dirmult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dirichlet-multinomial distribution — dirmult","text":"","code":"# single alpha alpha <- c(1,2,3) size <- 10 x <- rdirmult(1, size, alpha) d <- ddirmult(x, size, alpha) # vectorised over alpha and size alpha <- rbind(alpha, 2*alpha) size <- c(size, 3*size) x <- rdirmult(2, size, alpha)"},{"path":"https://janoleko.github.io/RTMBdist/reference/erf.html","id":null,"dir":"Reference","previous_headings":"","what":"AD-compatible error function and complementary error function — erf","title":"AD-compatible error function and complementary error function — erf","text":"AD-compatible error function complementary error function","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/erf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AD-compatible error function and complementary error function — erf","text":"","code":"erf(x)  erfc(x)"},{"path":"https://janoleko.github.io/RTMBdist/reference/erf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AD-compatible error function and complementary error function — erf","text":"x vector evaluation points","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/erf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AD-compatible error function and complementary error function — erf","text":"erf(x) returns error function erfc(x) returns complementary error function.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/erf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AD-compatible error function and complementary error function — erf","text":"","code":"erf(1) #> [1] 0.8427008 erfc(1) #> [1] 0.1572992"},{"path":"https://janoleko.github.io/RTMBdist/reference/exgauss.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponentially modified Gaussian distribution — exgauss","title":"Exponentially modified Gaussian distribution — exgauss","text":"Density, distribution function, quantile function, random generation exponentially modified Gaussian distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/exgauss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exponentially modified Gaussian distribution — exgauss","text":"","code":"dexgauss(x, mu = 0, sigma = 1, lambda = 1, log = FALSE)  pexgauss(q, mu = 0, sigma = 1, lambda = 1, lower.tail = TRUE, log.p = FALSE)  qexgauss(p, mu = 0, sigma = 1, lambda = 1, lower.tail = TRUE, log.p = FALSE)  rexgauss(n, mu = 0, sigma = 1, lambda = 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/exgauss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponentially modified Gaussian distribution — exgauss","text":"x, q vector quantiles mu mean parameter Gaussian part sigma standard deviation parameter Gaussian part, must positive. lambda rate parameter exponential part, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/exgauss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponentially modified Gaussian distribution — exgauss","text":"dexgauss gives density, pexgauss gives distribution function, qexgauss gives quantile function, rexgauss generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/exgauss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exponentially modified Gaussian distribution — exgauss","text":"implementation dexgauss pexgauss allows automatic differentiation RTMB. qexgauss rexgauss reparameterised imports gamlss.dist::exGAUS. \\(X \\sim N(\\mu, \\sigma^2)\\) \\(Y \\sim \\text{Exp}(\\lambda)\\), \\(Z = X + Y\\) follows exponentially modified Gaussian distribution parameters \\(\\mu\\), \\(\\sigma\\), \\(\\lambda\\).","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/exgauss.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Exponentially modified Gaussian distribution — exgauss","text":"Rigby, R. ., Stasinopoulos, D. M., Heller, G. Z., De Bastiani, F. (2019) Distributions modeling location, scale, shape: Using GAMLSS R, Chapman Hall/CRC, doi:10.1201/9780429298547. older version can found https://www.gamlss.com/.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/exgauss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponentially modified Gaussian distribution — exgauss","text":"","code":"x <- rexgauss(1, 1, 2, 2) d <- dexgauss(x, 1, 2, 2) p <- pexgauss(x, 1, 2, 2) q <- qexgauss(p, 1, 2, 2)"},{"path":"https://janoleko.github.io/RTMBdist/reference/foldnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Folded normal distribution — foldnorm","title":"Folded normal distribution — foldnorm","text":"Density, distribution function, random generation folded normal distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/foldnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Folded normal distribution — foldnorm","text":"","code":"dfoldnorm(x, mu = 0, sigma = 1, log = FALSE)  pfoldnorm(q, mu = 0, sigma = 1, lower.tail = TRUE, log.p = FALSE)  rfoldnorm(n, mu = 0, sigma = 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/foldnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Folded normal distribution — foldnorm","text":"x, q vector quantiles mu location parameter sigma scale parameter, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return p vector probabilities","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/foldnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Folded normal distribution — foldnorm","text":"dfoldnorm gives density, pfoldnorm gives distribution function, rfoldnorm generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/foldnorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Folded normal distribution — foldnorm","text":"implementation dfoldnorm allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/foldnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Folded normal distribution — foldnorm","text":"","code":"x <- rfoldnorm(1, 1, 2) d <- dfoldnorm(x, 1, 2) p <- pfoldnorm(x, 1, 2)"},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":null,"dir":"Reference","previous_headings":"","what":"Reparameterised gamma distribution — gamma2","title":"Reparameterised gamma distribution — gamma2","text":"Density, distribution function, quantile function, random generation gamma distribution reparameterised terms mean standard deviation.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reparameterised gamma distribution — gamma2","text":"","code":"dgamma2(x, mean = 1, sd = 1, log = FALSE)  pgamma2(q, mean = 1, sd = 1, lower.tail = TRUE, log.p = FALSE)  qgamma2(p, mean = 1, sd = 1, lower.tail = TRUE, log.p = FALSE)  rgamma2(n, mean = 1, sd = 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reparameterised gamma distribution — gamma2","text":"x, q vector quantiles mean mean parameter, must positive. sd standard deviation parameter, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reparameterised gamma distribution — gamma2","text":"dgamma2 gives density, pgamma2 gives distribution function, qgamma2 gives quantile function, rgamma2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reparameterised gamma distribution — gamma2","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reparameterised gamma distribution — gamma2","text":"","code":"x <- rgamma2(1) d <- dgamma2(x) p <- pgamma2(x) q <- qgamma2(p)"},{"path":"https://janoleko.github.io/RTMBdist/reference/genpois.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalised Poisson distribution — genpois","title":"Generalised Poisson distribution — genpois","text":"Probability mass function, distribution function, random generation generalised Poisson distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/genpois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalised Poisson distribution — genpois","text":"","code":"dgenpois(x, lambda = 1, phi = 1, log = FALSE)  pgenpois(q, lambda = 1, phi = 1, lower.tail = TRUE, log.p = FALSE)  qgenpois(p, lambda = 1, phi = 1,          lower.tail = TRUE, log.p = FALSE, max.value = 10000)  rgenpois(n, lambda = 1, phi = 1, max.value = 10000)"},{"path":"https://janoleko.github.io/RTMBdist/reference/genpois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalised Poisson distribution — genpois","text":"x, q integer vector counts lambda vector positive means phi vector non-negative dispersion parameters log, log.p logical; return log-density TRUE lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities max.value constant, set default value 10000 far algorithm look q. n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/genpois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalised Poisson distribution — genpois","text":"dgenpois gives probability mass function, pgenpois gives distribution function, qgenpois gives quantile function, rgenpois generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/genpois.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalised Poisson distribution — genpois","text":"implementation dgenpois allows automatic differentiation RTMB. functions imported gamlss.dist::GPO. distribution mean \\(\\lambda\\) variance \\(\\lambda(1 + \\phi \\lambda)^2\\). \\(\\phi = 0\\) reduces Poisson distribution, however \\(\\phi\\) must strictly positive .","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/genpois.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalised Poisson distribution — genpois","text":"","code":"set.seed(123) x <- rgenpois(1, 2, 3) d <- dgenpois(x, 2, 3) p <- pgenpois(x, 2, 3) q <- qgenpois(p, 2, 3)"},{"path":"https://janoleko.github.io/RTMBdist/reference/gumbel.html","id":null,"dir":"Reference","previous_headings":"","what":"Gumbel distribution — gumbel","title":"Gumbel distribution — gumbel","text":"Density, distribution function, quantile function, random generation Gumbel distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gumbel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gumbel distribution — gumbel","text":"","code":"dgumbel(x, location = 0, scale = 1, log = FALSE)  pgumbel(q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)  qgumbel(p, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)  rgumbel(n, location = 0, scale = 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/gumbel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gumbel distribution — gumbel","text":"x, q vector quantiles location location parameter scale scale parameter, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gumbel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gumbel distribution — gumbel","text":"dgumbel gives density, pgumbel gives distribution function, qgumbel gives quantile function, rgumbel generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gumbel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gumbel distribution — gumbel","text":"implementation dgumbel allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gumbel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gumbel distribution — gumbel","text":"","code":"x <- rgumbel(1, 0.5, 2) d <- dgumbel(x, 0.5, 2) p <- pgumbel(x, 0.5, 2) q <- qgumbel(p, 0.5, 2)"},{"path":"https://janoleko.github.io/RTMBdist/reference/invgauss.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse Gaussian distribution — invgauss","title":"Inverse Gaussian distribution — invgauss","text":"Density, distribution function, random generation inverse Gaussian distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/invgauss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse Gaussian distribution — invgauss","text":"","code":"dinvgauss(x, mean = 1, shape = 1, log = FALSE)  pinvgauss(q, mean = 1, shape = 1, lower.tail = TRUE, log.p = FALSE)  qinvgauss(p, mean = 1, shape = 1, lower.tail = TRUE, log.p = FALSE, ...)  rinvgauss(n, mean = 1, shape = 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/invgauss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse Gaussian distribution — invgauss","text":"x, q vector quantiles, must positive. mean location parameter shape shape parameter, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities ... additional parameter passed statmod::qinvgauss numerical evaluation quantile function. n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/invgauss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse Gaussian distribution — invgauss","text":"dinvgauss gives density, pinvgauss gives distribution function, qinvgauss gives quantile function, rinvgauss generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/invgauss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inverse Gaussian distribution — invgauss","text":"implementation dinvgauss allows automatic differentiation RTMB. qinvgauss rinvgauss imported statmod package.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/invgauss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse Gaussian distribution — invgauss","text":"","code":"x <- rinvgauss(1, 1, 0.5) d <- dinvgauss(x, 1, 0.5) p <- pinvgauss(x, 1, 0.5) q <- qinvgauss(p, 1, 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/laplace.html","id":null,"dir":"Reference","previous_headings":"","what":"Laplace distribution — laplace","title":"Laplace distribution — laplace","text":"Density, distribution function, quantile function, random generation Laplace distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/laplace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Laplace distribution — laplace","text":"","code":"dlaplace(x, mu = 0, b = 1, log = FALSE)  plaplace(q, mu = 0, b = 1, lower.tail = TRUE, log.p = FALSE)  qlaplace(p, mu = 0, b = 1, lower.tail = TRUE, log.p = FALSE)  rlaplace(n, mu = 0, b = 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/laplace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Laplace distribution — laplace","text":"x, q vector quantiles mu location parameter b scale parameter, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/laplace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Laplace distribution — laplace","text":"dlaplace gives density, plaplace gives distribution function, qlaplace gives quantile function, rlaplace generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/laplace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Laplace distribution — laplace","text":"implementation dlaplace allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/laplace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Laplace distribution — laplace","text":"","code":"x <- rlaplace(1, 1, 1) d <- dlaplace(x, 1, 1) p <- plaplace(x, 1, 1) q <- qlaplace(p, 1, 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/mvt.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate t distribution — mvt","title":"Multivariate t distribution — mvt","text":"Density random generation multivariate t distribution","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/mvt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate t distribution — mvt","text":"","code":"dmvt(x, mu, Sigma, df, log = FALSE)  rmvt(n, mu, Sigma, df)"},{"path":"https://janoleko.github.io/RTMBdist/reference/mvt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate t distribution — mvt","text":"x vector matrix quantiles mu vector matrix location parameters (mean df > 1) Sigma positive definite scale matrix (proportional covariance matrix df > 2) df degrees freedom; must positive log logical; TRUE, densities \\(p\\) returned \\(\\log(p)\\). n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/mvt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate t distribution — mvt","text":"dmvt gives density, rmvt generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/mvt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multivariate t distribution — mvt","text":"implementation dmvt allows automatic differentiation RTMB. Note: df ≤ 1 mean undefined, df ≤ 2 covariance infinite. df > 2, covariance df/(df-2) * Sigma.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/mvt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multivariate t distribution — mvt","text":"","code":"# single mu mu <- c(1,2,3) Sigma <- diag(c(1,1,1)) df <- 5 x <- rmvt(2, mu, Sigma, df) d <- dmvt(x, mu, Sigma, df) # vectorised over mu mu <- rbind(c(1,2,3), c(0, 0.5, 1)) x <- rmvt(2, mu, Sigma, df) d <- dmvt(x, mu, Sigma, df)"},{"path":"https://janoleko.github.io/RTMBdist/reference/nbinom2.html","id":null,"dir":"Reference","previous_headings":"","what":"Reparameterised negative binomial distribution — nbinom2","title":"Reparameterised negative binomial distribution — nbinom2","text":"Probability mass function, distribution function, quantile function, random generation negative binomial distribution reparameterised terms mean size.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/nbinom2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reparameterised negative binomial distribution — nbinom2","text":"","code":"dnbinom2(x, mu, size, log = FALSE)  pnbinom2(q, mu, size, lower.tail = TRUE, log.p = FALSE)  qnbinom2(p, mu, size, lower.tail = TRUE, log.p = FALSE)  rnbinom2(n, mu, size)  pnbinom(q, size, prob, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://janoleko.github.io/RTMBdist/reference/nbinom2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reparameterised negative binomial distribution — nbinom2","text":"x, q vector quantiles mu mean parameter, must positive. size size parameter, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities n number random values return. prob probability success trial. 0 < prob <= 1.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/nbinom2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reparameterised negative binomial distribution — nbinom2","text":"dnbinom2 gives density, pnbinom2 gives distribution function, qnbinom2 gives quantile function, rnbinom2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/nbinom2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reparameterised negative binomial distribution — nbinom2","text":"implementation allows automatic differentiation RTMB. pnbinom AD-compatible implementation standard parameterisation CDF, missing RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/nbinom2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reparameterised negative binomial distribution — nbinom2","text":"","code":"set.seed(123) x <- rnbinom2(1, 1, 2) d <- dnbinom2(x, 1, 2) p <- pnbinom2(x, 1, 2) q <- qnbinom2(p, 1, 2)"},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta.html","id":null,"dir":"Reference","previous_headings":"","what":"One-inflated beta distribution — oibeta","title":"One-inflated beta distribution — oibeta","text":"Density, distribution function, random generation one-inflated beta distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One-inflated beta distribution — oibeta","text":"","code":"doibeta(x, shape1, shape2, oneprob = 0, log = FALSE)  poibeta(q, shape1, shape2, oneprob = 0, lower.tail = TRUE, log.p = FALSE)  roibeta(n, shape1, shape2, oneprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One-inflated beta distribution — oibeta","text":"x, q vector quantiles shape1, shape2 non-negative shape parameters beta distribution oneprob zero-inflation probability 0 1. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One-inflated beta distribution — oibeta","text":"doibeta gives density, poibeta gives distribution function, roibeta generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"One-inflated beta distribution — oibeta","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One-inflated beta distribution — oibeta","text":"","code":"set.seed(123) x <- roibeta(1, 2, 2, 0.5) d <- doibeta(x, 2, 2, 0.5) p <- poibeta(x, 2, 2, 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta2.html","id":null,"dir":"Reference","previous_headings":"","what":"Reparameterised one-inflated beta distribution — oibeta2","title":"Reparameterised one-inflated beta distribution — oibeta2","text":"Density, distribution function, random generation one-inflated beta distribution reparameterised terms mean concentration.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reparameterised one-inflated beta distribution — oibeta2","text":"","code":"doibeta2(x, mu, phi, oneprob = 0, log = FALSE)  poibeta2(q, mu, phi, oneprob = 0, lower.tail = TRUE, log.p = FALSE)  roibeta2(n, mu, phi, oneprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reparameterised one-inflated beta distribution — oibeta2","text":"x, q vector quantiles mu mean parameter, must interval 0 1. phi concentration parameter, must positive. oneprob zero-inflation probability 0 1. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reparameterised one-inflated beta distribution — oibeta2","text":"doibeta2 gives density, poibeta2 gives distribution function, roibeta2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reparameterised one-inflated beta distribution — oibeta2","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reparameterised one-inflated beta distribution — oibeta2","text":"","code":"set.seed(123) x <- roibeta2(1, 0.6, 2, 0.5) d <- doibeta2(x, 0.6, 2, 0.5) p <- poibeta2(x, 0.6, 2, 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/pareto.html","id":null,"dir":"Reference","previous_headings":"","what":"Pareto distribution — pareto","title":"Pareto distribution — pareto","text":"Density, distribution function, quantile function, random generation pareto distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/pareto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pareto distribution — pareto","text":"","code":"dpareto(x, mu = 1, log = FALSE)  ppareto(q, mu = 1, lower.tail = TRUE, log.p = FALSE)  qpareto(p, mu = 1, lower.tail = TRUE, log.p = FALSE)  rpareto(n, mu = 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/pareto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pareto distribution — pareto","text":"x, q vector quantiles mu location parameter, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE (default), probabilities \\(P[X \\le x]\\), otherwise \\(P[X > x]\\). p vector probabilities n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/pareto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pareto distribution — pareto","text":"dpareto gives density, ppareto gives distribution function, qpareto gives quantile function, rpareto generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/pareto.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pareto distribution — pareto","text":"implementation dpareto ppareto allows automatic differentiation RTMB functions imported gamlss.dist package. See gamlss.dist::PARETO details.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/pareto.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pareto distribution — pareto","text":"Rigby, R. ., Stasinopoulos, D. M., Heller, G. Z., De Bastiani, F. (2019) Distributions modeling location, scale, shape: Using GAMLSS R, Chapman Hall/CRC, doi:10.1201/9780429298547. older version can found https://www.gamlss.com/.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/pareto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pareto distribution — pareto","text":"","code":"set.seed(123) x <- rpareto(1, mu = 5) d <- dpareto(x, mu = 5) p <- ppareto(x, mu = 5) q <- qpareto(p, mu = 5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/powerexp.html","id":null,"dir":"Reference","previous_headings":"","what":"Power Exponential distribution (PE and PE2) — powerexp","title":"Power Exponential distribution (PE and PE2) — powerexp","text":"Density, distribution function, quantile function, random generation Power Exponential distribution (two versions).","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/powerexp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power Exponential distribution (PE and PE2) — powerexp","text":"","code":"dpowerexp(x, mu = 0, sigma = 1, nu = 2, log = FALSE)  ppowerexp(q, mu = 0, sigma = 1, nu = 2, lower.tail = TRUE, log.p = FALSE)  qpowerexp(p, mu = 0, sigma = 1, nu = 2, lower.tail = TRUE, log.p = FALSE)  rpowerexp(n, mu = 0, sigma = 1, nu = 2)  dpowerexp2(x, mu = 0, sigma = 1, nu = 2, log = FALSE)  ppowerexp2(q, mu = 0, sigma = 1, nu = 2, lower.tail = TRUE, log.p = FALSE)  qpowerexp2(p, mu = 0, sigma = 1, nu = 2, lower.tail = TRUE, log.p = FALSE)  rpowerexp2(n, mu = 0, sigma = 1, nu = 2)"},{"path":"https://janoleko.github.io/RTMBdist/reference/powerexp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power Exponential distribution (PE and PE2) — powerexp","text":"x, q vector quantiles mu location parameter sigma scale parameter, must positive nu shape parameter (real) log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\) lower.tail logical; TRUE (default), probabilities \\(P[X \\le x]\\), otherwise \\(P[X > x]\\) p vector probabilities n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/powerexp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power Exponential distribution (PE and PE2) — powerexp","text":"dpowerexp gives density, ppowerexp gives distribution function, qpowerexp gives quantile function, rpowerexp generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/powerexp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Power Exponential distribution (PE and PE2) — powerexp","text":"implementation densities distribution functions allow automatic differentiation RTMB functions imported gamlss.dist package. powerexp, mu mean sigma standard deviation hold powerexp2. See gamlss.dist::PE details.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/powerexp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Power Exponential distribution (PE and PE2) — powerexp","text":"Rigby, R. ., Stasinopoulos, D. M., Heller, G. Z., De Bastiani, F. (2019) Distributions modeling location, scale, shape: Using GAMLSS R, Chapman Hall/CRC, doi:10.1201/9780429298547. older version can found https://www.gamlss.com/.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/powerexp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power Exponential distribution (PE and PE2) — powerexp","text":"","code":"# PE x <- rpowerexp(1, mu = 0, sigma = 1, nu = 2) d <- dpowerexp(x, mu = 0, sigma = 1, nu = 2) p <- ppowerexp(x, mu = 0, sigma = 1, nu = 2) q <- qpowerexp(p, mu = 0, sigma = 1, nu = 2)  # PE2 x <- rpowerexp2(1, mu = 0, sigma = 1, nu = 2) d <- dpowerexp2(x, mu = 0, sigma = 1, nu = 2) p <- ppowerexp2(x, mu = 0, sigma = 1, nu = 2) q <- qpowerexp2(p, mu = 0, sigma = 1, nu = 2)"},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Skew normal distribution — skewnorm","title":"Skew normal distribution — skewnorm","text":"Density, distribution function, quantile function, random generation skew normal distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skew normal distribution — skewnorm","text":"","code":"dskewnorm(x, xi = 0, omega = 1, alpha = 0, log = FALSE)  pskewnorm(q, xi = 0, omega = 1, alpha = 0, ...)  qskewnorm(p, xi = 0, omega = 1, alpha = 0, ...)  rskewnorm(n, xi = 0, omega = 1, alpha = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skew normal distribution — skewnorm","text":"x, q vector quantiles xi location parameter omega scale parameter, must positive. alpha skewness parameter, +/- Inf allowed. log logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). ... additional parameters passed sn package functions pskewnorm qskewnorm. p vector probabilities n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skew normal distribution — skewnorm","text":"dskewnorm gives density, pskewnorm gives distribution function, qskewnorm gives quantile function, rskewnorm generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Skew normal distribution — skewnorm","text":"implementation dskewnorm allows automatic differentiation RTMB functions imported sn package. See sn::dsn details.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Skew normal distribution — skewnorm","text":"","code":"# alpha is skew parameter x <- rskewnorm(1, alpha = 1) d <- dskewnorm(x, alpha = 1) p <- pskewnorm(x, alpha = 1) q <- qskewnorm(p, alpha = 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm2.html","id":null,"dir":"Reference","previous_headings":"","what":"Reparameterised skew normal distribution — skewnorm2","title":"Reparameterised skew normal distribution — skewnorm2","text":"Density, distribution function, quantile function random generation skew normal distribution reparameterised terms mean, standard deviation skew magnitude","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reparameterised skew normal distribution — skewnorm2","text":"","code":"dskewnorm2(x, mean = 0, sd = 1, alpha = 0, log = FALSE)  pskewnorm2(q, mean = 0, sd = 1, alpha = 0, ...)  qskewnorm2(p, mean = 0, sd = 1, alpha = 0, ...)  rskewnorm2(n, mean = 0, sd = 1, alpha = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reparameterised skew normal distribution — skewnorm2","text":"x, q vector quantiles mean mean parameter sd standard deviation, must positive. alpha skewness parameter, +/- Inf allowed. log logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). ... additional parameters passed sn package functions pskewnorm qskewnorm. p vector probabilities n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reparameterised skew normal distribution — skewnorm2","text":"dskewnorm2 gives density, pskewnorm2 gives distribution function, qskewnorm2 gives quantile function, rskewnorm2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reparameterised skew normal distribution — skewnorm2","text":"implementation dskewnorm2 allows automatic differentiation RTMB functions imported sn package.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reparameterised skew normal distribution — skewnorm2","text":"","code":"# alpha is skew parameter x <- rskewnorm2(1, alpha = 1) d <- dskewnorm2(x, alpha = 1) p <- pskewnorm2(x, alpha = 1) q <- qskewnorm2(p, alpha = 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/skewt.html","id":null,"dir":"Reference","previous_headings":"","what":"Skewed students t distribution — skewt","title":"Skewed students t distribution — skewt","text":"Density, distribution function, quantile function, random generation skew t distribution (type 2).","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skewed students t distribution — skewt","text":"","code":"dskewt(x, mu = 0, sigma = 1, skew = 0, df = 1000, log = FALSE)  pskewt(q, mu = 0, sigma = 1, skew = 0, df = 1000,        method = 0, lower.tail = TRUE, log.p = FALSE)  qskewt(p, mu = 0, sigma = 1, skew = 0, df = 1000,        tol = 1e-8, method = 0)  rskewt(n, mu = 0, sigma = 1, skew = 0, df = 1000)"},{"path":"https://janoleko.github.io/RTMBdist/reference/skewt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skewed students t distribution — skewt","text":"x, q vector quantiles mu location parameter sigma scale parameter, must positive. skew skewness parameter, can positive negative. df degrees freedom, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). method integer value 0 5 selects computing method; see ‘Details’ pst documentation meaning values. method=0 (default value), automatic choice made among four actual computing methods, depending arguments. lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities tol scalar value regulates accuracy result qsn, measured probability scale. n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skewed students t distribution — skewt","text":"dskewt gives density, pskewt gives distribution function, qskewt gives quantile function, rskewt generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Skewed students t distribution — skewt","text":"corresponds skew t type 2 distribution GAMLSS (ST2), see pp. 411-412 Rigby et al. (2019) version implemented sn package. implementation dskewt allows automatic differentiation RTMB functions imported sn package. See sn::dst details. Caution: numerial optimisation, skew parameter NEVER initialised exactly zero. cause initial subsequent derivatives exactly zero hence parameter remain initial value.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Skewed students t distribution — skewt","text":"","code":"x <- rskewt(1, 1, 2, 5, 2) d <- dskewt(x, 1, 2, 5, 2) p <- pskewt(x, 1, 2, 5, 2) q <- qskewt(p, 1, 2, 5, 2)"},{"path":"https://janoleko.github.io/RTMBdist/reference/t2.html","id":null,"dir":"Reference","previous_headings":"","what":"Student t distribution with location and scale — t2","title":"Student t distribution with location and scale — t2","text":"Density, distribution function, quantile function, random generation t distribution location scale parameters.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/t2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Student t distribution with location and scale — t2","text":"","code":"dt2(x, mu, sigma, df, log = FALSE)  pt2(q, mu, sigma, df)  rt2(n, mu, sigma, df)  qt2(p, mu, sigma, df)  pt(q, df)"},{"path":"https://janoleko.github.io/RTMBdist/reference/t2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Student t distribution with location and scale — t2","text":"x, q vector quantiles mu location parameter sigma scale parameter, must positive. df degrees freedom, must positive. log logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). n number random values return. p vector probabilities","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/t2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Student t distribution with location and scale — t2","text":"dt2 gives density, pt2 gives distribution function, qt2 gives quantile function, rt2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/t2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Student t distribution with location and scale — t2","text":"implementation dt2 allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/t2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Student t distribution with location and scale — t2","text":"","code":"x <- rt2(1, 1, 2, 5) d <- dt2(x, 1, 2, 5) p <- pt2(x, 1, 2, 5) q <- qt2(p, 1, 2, 5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/truncnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncated normal distribution — truncnorm","title":"Truncated normal distribution — truncnorm","text":"Density, distribution function, quantile function, random generation truncated normal distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/truncnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncated normal distribution — truncnorm","text":"","code":"dtruncnorm(x, mean = 0, sd = 1, min = -Inf, max = Inf, log = FALSE)  ptruncnorm(q, mean = 0, sd = 1, min = -Inf, max = Inf,            lower.tail = TRUE, log.p = FALSE)  qtruncnorm(p, mean = 0, sd = 1, min = -Inf, max = Inf,            lower.tail = TRUE, log.p = FALSE)  rtruncnorm(n, mean = 0, sd = 1, min = -Inf, max = Inf)"},{"path":"https://janoleko.github.io/RTMBdist/reference/truncnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncated normal distribution — truncnorm","text":"x, q vector quantiles mean mean parameter, must positive. sd standard deviation parameter, must positive. min, max truncation bounds. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/truncnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncated normal distribution — truncnorm","text":"dtruncnorm gives density, ptruncnorm gives distribution function, qtruncnorm gives quantile function, rtruncnorm generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/truncnorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Truncated normal distribution — truncnorm","text":"implementation dtruncnorm allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/truncnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Truncated normal distribution — truncnorm","text":"","code":"x <- rtruncnorm(1, mean = 2, sd = 2, min = -1, max = 5) d <- dtruncnorm(x, mean = 2, sd = 2, min = -1, max = 5) p <- ptruncnorm(x, mean = 2, sd = 2, min = -1, max = 5) q <- qtruncnorm(p, mean = 2, sd = 2, min = -1, max = 5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/trunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncated t distribution — trunct","title":"Truncated t distribution — trunct","text":"Density, distribution function, quantile function, random generation truncated t distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/trunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncated t distribution — trunct","text":"","code":"dtrunct(x, df, min = -Inf, max = Inf, log = FALSE)  ptrunct(q, df, min = -Inf, max = Inf, lower.tail = TRUE, log.p = FALSE)  qtrunct(p, df, min = -Inf, max = Inf, lower.tail = TRUE, log.p = FALSE)  rtrunct(n, df, min = -Inf, max = Inf)"},{"path":"https://janoleko.github.io/RTMBdist/reference/trunct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncated t distribution — trunct","text":"x, q vector quantiles df degrees freedom parameter, must positive. min, max truncation bounds. log, log.p logical; TRUE, probabilities/densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise \\(P[X > x]\\). p vector probabilities n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/trunct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncated t distribution — trunct","text":"dtrunct gives density, ptrunct gives distribution function, qtrunct gives quantile function, rtrunct generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/trunct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Truncated t distribution — trunct","text":"implementation dtrunct allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/trunct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Truncated t distribution — trunct","text":"","code":"x <- rtrunct(1, df = 5, min = -1, max = 5) d <- dtrunct(x, df = 5, min = -1, max = 5) p <- ptrunct(x, df = 5, min = -1, max = 5) q <- qtrunct(p, df = 5, min = -1, max = 5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/trunct2.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncated t distribution with location and scale — trunct2","title":"Truncated t distribution with location and scale — trunct2","text":"Density, distribution function, quantile function, random generation truncated t distribution location mu scale sigma.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/trunct2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncated t distribution with location and scale — trunct2","text":"","code":"dtrunct2(x, df, mu = 0, sigma = 1, min = -Inf, max = Inf, log = FALSE)  ptrunct2(q, df, mu = 0, sigma = 1, min = -Inf, max = Inf,          lower.tail = TRUE, log.p = FALSE)  qtrunct2(p, df, mu = 0, sigma = 1, min = -Inf, max = Inf,          lower.tail = TRUE, log.p = FALSE)  rtrunct2(n, df, mu = 0, sigma = 1, min = -Inf, max = Inf)"},{"path":"https://janoleko.github.io/RTMBdist/reference/trunct2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncated t distribution with location and scale — trunct2","text":"x, q vector quantiles df degrees freedom parameter, must positive. mu location parameter. sigma scale parameter, must positive. min, max truncation bounds. log, log.p logical; TRUE, probabilities/densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise \\(P[X > x]\\). p vector probabilities n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/trunct2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncated t distribution with location and scale — trunct2","text":"dtrunct2 gives density, ptrunct2 gives distribution function, qtrunct2 gives quantile function, rtrunct2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/trunct2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Truncated t distribution with location and scale — trunct2","text":"implementation dtrunct2 allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/trunct2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Truncated t distribution with location and scale — trunct2","text":"","code":"x <- rtrunct2(1, df = 5, mu = 2, sigma = 3, min = -1, max = 5) d <- dtrunct2(x, df = 5, mu = 2, sigma = 3, min = -1, max = 5) p <- ptrunct2(x, df = 5, mu = 2, sigma = 3, min = -1, max = 5) q <- qtrunct2(p, df = 5, mu = 2, sigma = 3, min = -1, max = 5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":null,"dir":"Reference","previous_headings":"","what":"von Mises distribution — vm","title":"von Mises distribution — vm","text":"Density, distribution function, random generation von Mises distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"von Mises distribution — vm","text":"","code":"dvm(x, mu = 0, kappa = 1, log = FALSE)  pvm(q, mu = 0, kappa = 1, from = NULL, tol = 1e-20)  rvm(n, mu = 0, kappa = 1, wrap = TRUE)"},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"von Mises distribution — vm","text":"x, q vector angles measured radians evaluate density function. mu mean direction distribution measured radians. kappa non-negative numeric value concentration parameter distribution. log logical; TRUE, densities returned log scale. value integration CDF starts. NULL, set mu - pi. tol precision evaluating distribution function n number random values return. wrap logical; TRUE, generated angles wrapped interval -pi pi.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"von Mises distribution — vm","text":"dvm gives density, pvm gives distribution function, rvm generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"von Mises distribution — vm","text":"implementation dvm allows automatic differentiation RTMB. rvm pvm simply wrappers corresponding functions circular.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"von Mises distribution — vm","text":"","code":"set.seed(1) x <- rvm(10, 0, 1) d <- dvm(x, 0, 1) p <- pvm(x, 0, 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf.html","id":null,"dir":"Reference","previous_headings":"","what":"von Mises-Fisher distribution — vmf","title":"von Mises-Fisher distribution — vmf","text":"Density, distribution function, random generation von Mises-Fisher distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"von Mises-Fisher distribution — vmf","text":"","code":"dvmf(x, mu, kappa, log = FALSE)  rvmf(n, mu, kappa)"},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"von Mises-Fisher distribution — vmf","text":"x unit vector matrix (row unit vector) evaluation points mu unit mean vector kappa non-negative numeric value concentration parameter distribution. log logical; TRUE, densities returned log scale. n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"von Mises-Fisher distribution — vmf","text":"dvmf gives density rvm generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"von Mises-Fisher distribution — vmf","text":"implementation dvmf allows automatic differentiation RTMB. rvmf reparameterised import movMF::rmovMF.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"von Mises-Fisher distribution — vmf","text":"","code":"set.seed(123) # single parameter set mu <- rep(1, 3) / sqrt(3) kappa <- 4 x <- rvmf(1, mu, kappa) d <- dvmf(x, mu, kappa)  # vectorised over parameters mu <- matrix(mu, nrow = 1) mu <- mu[rep(1,10), ] kappa <- rep(kappa, 10) x <- rvmf(10, mu, kappa) d <- dvmf(x, mu, kappa)"},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf2.html","id":null,"dir":"Reference","previous_headings":"","what":"Reparameterised von Mises-Fisher distribution — vmf2","title":"Reparameterised von Mises-Fisher distribution — vmf2","text":"Density, distribution function, random generation von Mises-Fisher distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reparameterised von Mises-Fisher distribution — vmf2","text":"","code":"dvmf2(x, theta, log = FALSE)  rvmf2(n, theta)"},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reparameterised von Mises-Fisher distribution — vmf2","text":"x unit vector matrix (row unit vector) evaluation points theta direction concentration vector. direction theta determines mean direction sphere. norm theta concentration parameter distribution. log logical; TRUE, densities returned log scale. n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reparameterised von Mises-Fisher distribution — vmf2","text":"dvmf gives density rvm generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reparameterised von Mises-Fisher distribution — vmf2","text":"parameterisation, \\(\\theta = \\kappa \\mu\\), \\(\\mu\\) unit vector \\(\\kappa\\) concentration parameter. dvmf2 allows automatic differentiation RTMB. rvmf2 imported movMF::rmovMF.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reparameterised von Mises-Fisher distribution — vmf2","text":"","code":"set.seed(123) # single parameter set theta <- c(1,2,3) x <- rvmf2(1, theta) d <- dvmf2(x, theta)  # vectorised over parameters theta <- matrix(theta, nrow = 1) theta <- theta[rep(1,10), ] x <- rvmf2(10, theta) d <- dvmf2(x, theta)"},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapped Cauchy distribution — wrpcauchy","title":"wrapped Cauchy distribution — wrpcauchy","text":"Density random generation wrapped Cauchy distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapped Cauchy distribution — wrpcauchy","text":"","code":"dwrpcauchy(x, mu = 0, rho, log = FALSE)  rwrpcauchy(n, mu = 0, rho, wrap = TRUE)"},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapped Cauchy distribution — wrpcauchy","text":"x vector angles measured radians evaluate density function. mu mean direction distribution measured radians. rho concentration parameter distribution, must interval 0 1. log logical; TRUE, densities returned log scale. n number random values return. wrap logical; TRUE, generated angles wrapped interval -pi pi.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapped Cauchy distribution — wrpcauchy","text":"dwrpcauchy gives density rwrpcauchy generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"wrapped Cauchy distribution — wrpcauchy","text":"implementation dwrpcauchy allows automatic differentiation RTMB. rwrpcauchy simply wrapper rwrappedcauchyimported circular.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wrapped Cauchy distribution — wrpcauchy","text":"","code":"set.seed(1) x <- rwrpcauchy(10, 0, 0.5) d <- dwrpcauchy(x, 0, 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zero_inflate.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated density constructer — zero_inflate","title":"Zero-inflated density constructer — zero_inflate","text":"Constructs zero-inflated density function given probability density function","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zero_inflate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated density constructer — zero_inflate","text":"","code":"zero_inflate(dist, discrete = NULL)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zero_inflate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated density constructer — zero_inflate","text":"dist either probability density function probability mass function discrete logical; TRUE, density x = 0 zeroprob + (1-zeroprob) * dist(0, ...). Otherwise just zeroprob. standard cases, determined automatically. non-standard cases, set TRUE FALSE depending type dist. See details.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zero_inflate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated density constructer — zero_inflate","text":"zero-inflated density function first argument x, second argument zeroprob, additional arguments ... passed dist.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zero_inflate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated density constructer — zero_inflate","text":"definition zero-inflation different discrete continuous distributions. discrete distributions p.m.f. \\(f\\) zero-inflation probability \\(p\\), $$\\Pr(X = 0) = p + (1 - p) \\cdot f(0),$$ $$\\Pr(X = x) = (1 - p) \\cdot f(x), \\quad x > 0.$$ continuous distributions p.d.f. \\(f\\), $$f_{\\text{zinfl}}(x) = p \\cdot \\delta_0(x) + (1 - p) \\cdot f(x),$$ \\(\\delta_0\\) Dirac delta function zero.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zero_inflate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated density constructer — zero_inflate","text":"","code":"# Zero-inflated normal distribution dzinorm <- zero_inflate(dnorm) dzinorm(c(NA, 0, 2), 0.5, mean = 1, sd = 1) #> [1]        NA 0.5000000 0.1209854  # Zero-inflated Poisson distribution zipois <- zero_inflate(dpois) zipois(c(NA, 0, 1), 0.5, 1) #> [1]        NA 0.6839397 0.1839397  # Non-standard case: Zero-inflated reparametrised beta distribution dzibeta2 <- zero_inflate(dbeta2, discrete = FALSE)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated beta distribution — zibeta","title":"Zero-inflated beta distribution — zibeta","text":"Density, distribution function, random generation zero-inflated beta distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated beta distribution — zibeta","text":"","code":"dzibeta(x, shape1, shape2, zeroprob = 0, log = FALSE)  pzibeta(q, shape1, shape2, zeroprob = 0, lower.tail = TRUE, log.p = FALSE)  rzibeta(n, shape1, shape2, zeroprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated beta distribution — zibeta","text":"x, q vector quantiles shape1, shape2 non-negative shape parameters beta distribution zeroprob zero-inflation probability 0 1. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated beta distribution — zibeta","text":"dzibeta gives density, pzibeta gives distribution function, rzibeta generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated beta distribution — zibeta","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated beta distribution — zibeta","text":"","code":"set.seed(123) x <- rzibeta(1, 2, 2, 0.5) d <- dzibeta(x, 2, 2, 0.5) p <- pzibeta(x, 2, 2, 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta2.html","id":null,"dir":"Reference","previous_headings":"","what":"Reparameterised zero-inflated beta distribution — zibeta2","title":"Reparameterised zero-inflated beta distribution — zibeta2","text":"Density, distribution function, random generation zero-inflated beta distribution reparameterised terms mean concentration.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reparameterised zero-inflated beta distribution — zibeta2","text":"","code":"dzibeta2(x, mu, phi, zeroprob = 0, log = FALSE)  pzibeta2(q, mu, phi, zeroprob = 0, lower.tail = TRUE, log.p = FALSE)  rzibeta2(n, mu, phi, zeroprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reparameterised zero-inflated beta distribution — zibeta2","text":"x, q vector quantiles mu mean parameter, must interval 0 1. phi concentration parameter, must positive. zeroprob zero-inflation probability 0 1. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE (default), probabilities \\(P[X \\leq x]\\), otherwise \\(P[X > x]\\). n number random values return. p vector probabilities","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reparameterised zero-inflated beta distribution — zibeta2","text":"dzibeta2 gives density, pzibeta2 gives distribution function, rzibeta2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reparameterised zero-inflated beta distribution — zibeta2","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reparameterised zero-inflated beta distribution — zibeta2","text":"","code":"set.seed(123) x <- rzibeta2(1, 0.5, 1, 0.5) d <- dzibeta2(x, 0.5, 1, 0.5) p <- pzibeta2(x, 0.5, 1, 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zibinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated binomial distribution — zibinom","title":"Zero-inflated binomial distribution — zibinom","text":"Probability mass function, distribution function, random generation zero-inflated binomial distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated binomial distribution — zibinom","text":"","code":"dzibinom(x, size, prob, zeroprob = 0, log = FALSE)  pzibinom(q, size, prob, zeroprob = 0, lower.tail = TRUE, log.p = FALSE)  rzibinom(n, size, prob, zeroprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zibinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated binomial distribution — zibinom","text":"x, q vector quantiles size number trials (zero ). prob probability success trial. zeroprob zero-inflation probability 0 1 log, log.p logical; return log-density TRUE lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated binomial distribution — zibinom","text":"dzibinom gives probability mass function, pzibinom gives distribution function, rzibinom generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibinom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated binomial distribution — zibinom","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated binomial distribution — zibinom","text":"","code":"set.seed(123) x <- rzibinom(1, size = 10, prob = 0.5, zeroprob = 0.5) d <- dzibinom(x, size = 10, prob = 0.5, zeroprob = 0.5) p <- pzibinom(x, size = 10, prob = 0.5, zeroprob = 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated gamma distribution — zigamma","title":"Zero-inflated gamma distribution — zigamma","text":"Density, distribution function, random generation zero-inflated gamma distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated gamma distribution — zigamma","text":"","code":"dzigamma(x, shape, scale, zeroprob = 0, log = FALSE)  pzigamma(q, shape, scale, zeroprob = 0, lower.tail = TRUE, log.p = FALSE)  rzigamma(n, shape, scale, zeroprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated gamma distribution — zigamma","text":"x, q vector quantiles shape positive shape parameter scale positive scale parameter zeroprob zero-inflation probability 0 1. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated gamma distribution — zigamma","text":"dzigamma gives density, pzigamma gives distribution function, rzigamma generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated gamma distribution — zigamma","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated gamma distribution — zigamma","text":"","code":"x <- rzigamma(1, 1, 1, 0.5) d <- dzigamma(x, 1, 1, 0.5) p <- pzigamma(x, 1, 1, 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma2.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated and reparameterised gamma distribution — zigamma2","title":"Zero-inflated and reparameterised gamma distribution — zigamma2","text":"Density, distribution function, random generation zero-inflated gamma distribution reparameterised terms mean standard deviation.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated and reparameterised gamma distribution — zigamma2","text":"","code":"dzigamma2(x, mean = 1, sd = 1, zeroprob = 0, log = FALSE)  pzigamma2(q, mean = 1, sd = 1, zeroprob = 0)  rzigamma2(n, mean = 1, sd = 1, zeroprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated and reparameterised gamma distribution — zigamma2","text":"x, q vector quantiles mean mean parameter, must positive. sd standard deviation parameter, must positive. zeroprob zero-inflation probability 0 1. log logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated and reparameterised gamma distribution — zigamma2","text":"dzigamma2 gives density, pzigamma2 gives distribution function, rzigamma generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated and reparameterised gamma distribution — zigamma2","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated and reparameterised gamma distribution — zigamma2","text":"","code":"x <- rzigamma2(1, 2, 1, 0.5) d <- dzigamma2(x, 2, 1, 0.5) p <- pzigamma2(x, 2, 1, 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/ziinvgauss.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated inverse Gaussian distribution — ziinvgauss","title":"Zero-inflated inverse Gaussian distribution — ziinvgauss","text":"Density, distribution function, random generation zero-inflated inverse Gaussian distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/ziinvgauss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated inverse Gaussian distribution — ziinvgauss","text":"","code":"dziinvgauss(x, mean = 1, shape = 1, zeroprob = 0, log = FALSE)  pziinvgauss(q, mean = 1, shape = 1, zeroprob = 0, lower.tail = TRUE, log.p = FALSE)  rziinvgauss(n, mean = 1, shape = 1, zeroprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/ziinvgauss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated inverse Gaussian distribution — ziinvgauss","text":"x, q vector quantiles mean location parameter shape shape parameter, must positive. zeroprob zero-probability, must \\([0, 1]\\). log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/ziinvgauss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated inverse Gaussian distribution — ziinvgauss","text":"dziinvgauss gives density, pziinvgauss gives distribution function, rziinvgauss generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/ziinvgauss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated inverse Gaussian distribution — ziinvgauss","text":"implementation zidinvgauss allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/ziinvgauss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated inverse Gaussian distribution — ziinvgauss","text":"","code":"x <- rziinvgauss(1, 1, 2, 0.5) d <- dziinvgauss(x, 1, 2, 0.5) p <- pziinvgauss(x, 1, 2, 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated negative binomial distribution — zinbinom","title":"Zero-inflated negative binomial distribution — zinbinom","text":"Probability mass function, distribution function, quantile function, random generation zero-inflated negative binomial distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated negative binomial distribution — zinbinom","text":"","code":"dzinbinom(x, size, prob, zeroprob = 0, log = FALSE)  pzinbinom(q, size, prob, zeroprob = 0, lower.tail = TRUE, log.p = FALSE)  rzinbinom(n, size, prob, zeroprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated negative binomial distribution — zinbinom","text":"x, q vector (non-negative integer) quantiles size size parameter, must positive. prob mean parameter, must positive. zeroprob zero-inflation probability 0 1. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return. p vector probabilities","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated negative binomial distribution — zinbinom","text":"dzinbinom gives density, pzinbinom gives distribution function, rzinbinom generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated negative binomial distribution — zinbinom","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated negative binomial distribution — zinbinom","text":"","code":"set.seed(123) x <- rzinbinom(1, size = 2, prob = 0.5, zeroprob = 0.5) d <- dzinbinom(x, size = 2, prob = 0.5, zeroprob = 0.5) p <- pzinbinom(x, size = 2, prob = 0.5, zeroprob = 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom2.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated and reparameterised negative binomial distribution — zinbinom2","title":"Zero-inflated and reparameterised negative binomial distribution — zinbinom2","text":"Probability mass function, distribution function, quantile function random generation zero-inflated negative binomial distribution reparameterised terms mean size.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated and reparameterised negative binomial distribution — zinbinom2","text":"","code":"dzinbinom2(x, mu, size, zeroprob = 0, log = FALSE)  pzinbinom2(q, mu, size, zeroprob = 0, lower.tail = TRUE, log.p = FALSE)  rzinbinom2(n, mu, size, zeroprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated and reparameterised negative binomial distribution — zinbinom2","text":"x, q vector (non-negative integer) quantiles mu mean parameter, must positive. size size parameter, must positive. zeroprob zero-inflation probability 0 1. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return. p vector probabilities","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated and reparameterised negative binomial distribution — zinbinom2","text":"dzinbinom2 gives density, pzinbinom2 gives distribution function, rzinbinom2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated and reparameterised negative binomial distribution — zinbinom2","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated and reparameterised negative binomial distribution — zinbinom2","text":"","code":"set.seed(123) x <- rzinbinom2(1, 2, 1, zeroprob = 0.5) d <- dzinbinom2(x, 2, 1, zeroprob = 0.5) p <- pzinbinom2(x, 2, 1, zeroprob = 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zipois.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated Poisson distribution — zipois","title":"Zero-inflated Poisson distribution — zipois","text":"Probability mass function, distribution function, random generation zero-inflated Poisson distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zipois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated Poisson distribution — zipois","text":"","code":"dzipois(x, lambda, zeroprob = 0, log = FALSE)  pzipois(q, lambda, zeroprob = 0, lower.tail = TRUE, log.p = FALSE)  rzipois(n, lambda, zeroprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zipois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated Poisson distribution — zipois","text":"x, q integer vector counts lambda vector (non-negative) means zeroprob zero-inflation probability 0 1 log, log.p logical; return log-density TRUE lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zipois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated Poisson distribution — zipois","text":"dzipois gives probability mass function, pzipois gives distribution function, rzipois generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zipois.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated Poisson distribution — zipois","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zipois.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated Poisson distribution — zipois","text":"","code":"set.seed(123) x <- rzipois(1, 0.5, 1) d <- dzipois(x, 0.5, 1) p <- pzipois(x, 0.5, 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero- and one-inflated beta distribution — zoibeta","title":"Zero- and one-inflated beta distribution — zoibeta","text":"Density, distribution function, random generation zero-one-inflated beta distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero- and one-inflated beta distribution — zoibeta","text":"","code":"dzoibeta(x, shape1, shape2, zeroprob = 0, oneprob = 0, log = FALSE)  pzoibeta(q, shape1, shape2, zeroprob = 0, oneprob = 0,          lower.tail = TRUE, log.p = FALSE)  rzoibeta(n, shape1, shape2, zeroprob = 0, oneprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero- and one-inflated beta distribution — zoibeta","text":"x, q vector quantiles shape1, shape2 non-negative shape parameters beta distribution zeroprob zero-inflation probability 0 1. oneprob zero-inflation probability 0 1. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero- and one-inflated beta distribution — zoibeta","text":"dzoibeta gives density, pzoibeta gives distribution function, rzoibeta generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero- and one-inflated beta distribution — zoibeta","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero- and one-inflated beta distribution — zoibeta","text":"","code":"set.seed(123) x <- rzoibeta(1, 2, 2, 0.2, 0.3) d <- dzoibeta(x, 2, 2, 0.2, 0.3) p <- pzoibeta(x, 2, 2, 0.2, 0.3)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta2.html","id":null,"dir":"Reference","previous_headings":"","what":"Reparameterised zero- and one-inflated beta distribution — zoibeta2","title":"Reparameterised zero- and one-inflated beta distribution — zoibeta2","text":"Density, distribution function, random generation zero-one-inflated beta distribution reparameterised terms mean concentration.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reparameterised zero- and one-inflated beta distribution — zoibeta2","text":"","code":"dzoibeta2(x, mu, phi, zeroprob = 0, oneprob = 0, log = FALSE)  pzoibeta2(q, mu, phi, zeroprob = 0, oneprob = 0,          lower.tail = TRUE, log.p = FALSE)  rzoibeta2(n, mu, phi, zeroprob = 0, oneprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reparameterised zero- and one-inflated beta distribution — zoibeta2","text":"x, q vector quantiles mu mean parameter, must interval 0 1. phi concentration parameter, must positive. zeroprob zero-inflation probability 0 1. oneprob zero-inflation probability 0 1. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reparameterised zero- and one-inflated beta distribution — zoibeta2","text":"dzoibeta2 gives density, pzoibeta2 gives distribution function, rzoibeta2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reparameterised zero- and one-inflated beta distribution — zoibeta2","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reparameterised zero- and one-inflated beta distribution — zoibeta2","text":"","code":"set.seed(123) x <- rzoibeta2(1, 0.6, 2, 0.2, 0.3) d <- dzoibeta2(x, 0.6, 2, 0.2, 0.3) p <- pzoibeta2(x, 0.6, 2, 0.2, 0.3)"},{"path":"https://janoleko.github.io/RTMBdist/news/index.html","id":"rtmbdist-development-version","dir":"Changelog","previous_headings":"","what":"RTMBdist (development version)","title":"RTMBdist (development version)","text":"Package created","code":""},{"path":"https://janoleko.github.io/RTMBdist/news/index.html","id":"rtmbdist-development-version-1","dir":"Changelog","previous_headings":"","what":"RTMBdist 0.0.0.9000","title":"RTMBdist (development version)","text":"Initial release.","code":""}]
