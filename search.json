[{"path":"https://janoleko.github.io/RTMBdist/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Jan-Ole Koslik Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://janoleko.github.io/RTMBdist/articles/distlist.html","id":"continuous-distributions","dir":"Articles","previous_headings":"","what":"Continuous distributions","title":"List of distributions","text":"beta2(mu, phi): Beta distribution reparameterised mean mu precision phi exgauss(mu, sigma, lambda): Exponentially modified Gaussian distribution parameterised location mu, scale sigma rate lambda foldnorm(mu, sigma): Folded normal distribution parameterised location mu scale sigma gamma2(mean, sd): Gamma distribution reparameterised mean standard deviation gumbel(location, scale): Gumbel distribution parameterised location scale invgauss(mean, shape): Inverse Gaussian distribution parameterised mean shape laplace(mu, b): Laplace distribution parameterised location mu scale b oibeta(shape1, shape2, oneprob): One-inflated beta distribution parameterised shape parameters shape1, shape2 one-probability oneprob oibeta2(mu, phi, oneprob): One-inflated beta distribution reparameterised mean mu, precision phi, one-probability oneprob skewnorm(xi, omega, alpha): Skew normal distribution parameterised location xi, scale omega skewness alpha skewnorm2(mean, sd, alpha): Skew normal distribution reparameterised mean, standard deviation skewness alpha skewt(mu, sigma, skew, df): Skew t-distribution parameterised location mu, scale sigma, skewness skew degrees freedom df truncnorm(mean, sd, min, max): Truncated normal distribution parameterised mean, standard deviation, lower bound min upper bound max t2(mu, sigma, df): Non-central scaled t-distribution parameterised location mu, scale sigma degrees freedom df vm(mu, kappa): Von Mises distribution parameterised mean direction mu concentration kappa wrpcauchy(mu, rho): Wrapped Cauchy distribution parameterised mean direction mu concentration rho zibeta(shape1, shape2, zeroprob): Zero-inflated beta distribution parameterised shape parameters shape1, shape2 zero-probability zeroprob zibeta2(mu, phi, zeroprob): Zero-inflated beta distribution reparameterised mean mu, precision phi, zero-probability zeroprob zigamma(shape, scale, zeroprob): Zero-inflated gamma distribution parameterised shape scale, zero-probability zeroprob zigamma2(mean, sd, zeroprob): Zero-inflated gamma distribution reparameterised mean, standard deviation zero-probability zeroprob ziinvgauss(mean, shape, zeroprob): Zero-inflated inverse Gaussian distribution parameterised mean, shape zero-probability zeroprob zoibeta(shape1, shape2, zeroprob, oneprob): Zero- one-inflated beta distribution parameterised shape parameters shape1, shape2, zero-probability zeroprob one-probability oneprob zoibeta2(mu, phi, zeroprob, oneprob): Zero- one-inflated beta distribution reparameterised mean mu, precision phi, zero-probability zeroprob one-probability oneprob","code":""},{"path":"https://janoleko.github.io/RTMBdist/articles/distlist.html","id":"discrete-distributions","dir":"Articles","previous_headings":"","what":"Discrete distributions","title":"List of distributions","text":"betabinom(size, shape1, shape2): Beta-binomial distribution parameterised size size, shape parameters shape1 shape2 genpois(lambda, phi): Generalised Poisson distribution parameterised mean lambda dispersion phi nbinom2(mu, size): Negative binomial distribution reparameterised mean mu size size zibinom(size, prob, zeroprob): Zero-inflated binomial distribution parameterised size size, success probability prob zero-probability zeroprob zinbinom(size, prob, zeroprob): Zero-inflated negative binomial distribution parameterised size size, success probability prob zero-probability zeroprob zinbinom2(mu, size, zeroprob): Zero-inflated negative binomial distribution reparameterised mean mu, size size zero-probability zeroprob zipois(lambda, zeroprob): Zero-inflated Poisson distribution parameterised rate lambda zero-probability zeroprob","code":""},{"path":"https://janoleko.github.io/RTMBdist/articles/distlist.html","id":"multivariate-distributions","dir":"Articles","previous_headings":"","what":"Multivariate distributions","title":"List of distributions","text":"dirichlet(alpha): Dirichlet distribution parameterised concentration parameter vector alpha dirmult(size, alpha): Dirichlet-multinomial distribution parameterised size concentration parameters alpha vmf(mu, kappa): Multivariate von Mises-Fisher distribution parameterised unit mean vector mu concentration kappa vmf2(theta): Multivariate von Mises-Fisher distribution parameterised parameter theta equal unit mean vector mu times concentration scalar kappa","code":""},{"path":"https://janoleko.github.io/RTMBdist/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jan-Ole Koslik. Author, maintainer.","code":""},{"path":"https://janoleko.github.io/RTMBdist/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Koslik J (2025). RTMBdist: Distributions compatible automatic differentiation RTMB. R package version 0.0.0.9000, https://janoleko.github.io/RTMBdist/.","code":"@Manual{,   title = {RTMBdist: Distributions compatible with automatic differentiation by RTMB},   author = {Jan-Ole Koslik},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://janoleko.github.io/RTMBdist/}, }"},{"path":"https://janoleko.github.io/RTMBdist/index.html","id":"rtmbdist","dir":"","previous_headings":"","what":"Distributions compatible with automatic differentiation by RTMB","title":"Distributions compatible with automatic differentiation by RTMB","text":"RTMB package enables powerful flexible statistical modelling rich random effect structures using automatic differentiation (AD). However, built-support probability distributions limited standard cases. RTMBdist fills gap providing collection non-standard, AD-compatible distributions, extending range models can implemented estimated RTMB. distributions implemented RTMBdist allow automatic simulation residual calculation RTMB. full list distributions currently available given List distributions vignette. Feel free contribute!","code":""},{"path":"https://janoleko.github.io/RTMBdist/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Distributions compatible with automatic differentiation by RTMB","text":"can install development version RTMBdist GitHub :","code":"remotes::install_github(\"janoleko/RTMBdist\")"},{"path":"https://janoleko.github.io/RTMBdist/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Distributions compatible with automatic differentiation by RTMB","text":"Let’s numerical maximum likelihood estimation gumbel distribution: magic RTMB, can also immediately simulate new data fitted model calculate residuals:","code":"library(RTMBdist) # simulate data x <- rgumbel(100, location = 5, scale = 2)  # negative log-likelihood function nll <- function(par) {   x <- OBS(x) # mark x as the response   loc <- par[1]; ADREPORT(loc)   scale <- exp(par[2]); ADREPORT(scale)   -sum(dgumbel(x, loc, scale, log = TRUE)) }  # RTMB AD object obj <- MakeADFun(nll, c(5, log(2)), silent = TRUE)  # model fitting using AD gradient opt <- nlminb(obj$par, obj$fn, obj$gr)  # model summary summary(sdreport(obj)) #>        Estimate Std. Error #> par   5.0015427 0.20659355 #> par   0.6732893 0.07663174 #> loc   5.0015427 0.20659355 #> scale 1.9606760 0.15025002 # simulate new data x_new <- obj$simulate()$x  # calculate residuals osa <- oneStepPredict(obj, method = \"cdf\", trace = FALSE) qqnorm(osa$res); abline(0, 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":null,"dir":"Reference","previous_headings":"","what":"Reparameterised beta distribution — beta2","title":"Reparameterised beta distribution — beta2","text":"Density, distribution function, quantile function, random generation beta distribution reparameterised terms mean concentration.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reparameterised beta distribution — beta2","text":"","code":"dbeta2(x, mu, phi, log = FALSE)  pbeta2(q, mu, phi, lower.tail = TRUE, log.p = FALSE)  qbeta2(p, mu, phi, lower.tail = TRUE, log.p = FALSE)  rbeta2(n, mu, phi)"},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reparameterised beta distribution — beta2","text":"x, q vector quantiles mu mean parameter, must interval 0 1. phi concentration parameter, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE (default), probabilities \\(P[X \\leq x]\\), otherwise \\(P[X > x]\\). p vector probabilities n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reparameterised beta distribution — beta2","text":"dbeta2 gives density, pbeta2 gives distribution function, qbeta2 gives quantile function, rbeta2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reparameterised beta distribution — beta2","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/beta2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reparameterised beta distribution — beta2","text":"","code":"set.seed(123) x <- rbeta2(1, 0.5, 1) d <- dbeta2(x, 0.5, 1) p <- pbeta2(x, 0.5, 1) q <- qbeta2(p, 0.5, 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/betabinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Beta-binomial distribution — betabinom","title":"Beta-binomial distribution — betabinom","text":"Density random generation beta-binomial distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/betabinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beta-binomial distribution — betabinom","text":"","code":"dbetabinom(x, size, shape1, shape2, log = FALSE)  rbetabinom(n, size, shape1, shape2)"},{"path":"https://janoleko.github.io/RTMBdist/reference/betabinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beta-binomial distribution — betabinom","text":"x vector non-negative counts. size vector total counts (number trials). Needs >= x. shape1 positive shape parameter 1 Beta prior. shape2 positive shape parameter 2 Beta prior. log logical; TRUE, densities returned log scale. n number random values return (rbetabinom).","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/betabinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Beta-binomial distribution — betabinom","text":"dbetabinom gives density rbetabinom generates random samples.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/betabinom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Beta-binomial distribution — betabinom","text":"implementation dbetabinom allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/betabinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beta-binomial distribution — betabinom","text":"","code":"set.seed(123) x <- rbetabinom(1, 10, 2, 5) d <- dbetabinom(x, 10, 2, 5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/dirichlet.html","id":null,"dir":"Reference","previous_headings":"","what":"Dirichlet distribution — dirichlet","title":"Dirichlet distribution — dirichlet","text":"Density random generation Dirichlet distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dirichlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dirichlet distribution — dirichlet","text":"","code":"ddirichlet(x, alpha, log = FALSE)  rdirichlet(n, alpha)"},{"path":"https://janoleko.github.io/RTMBdist/reference/dirichlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dirichlet distribution — dirichlet","text":"x vector matrix quantiles. x vector, needs sum one. x matrix, row sum one. alpha vector matrix positive shape parameters log logical; TRUE, densities \\(p\\) returned \\(\\log(p)\\). n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dirichlet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dirichlet distribution — dirichlet","text":"ddirichlet gives density.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dirichlet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dirichlet distribution — dirichlet","text":"implementation ddirichlet allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dirichlet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dirichlet distribution — dirichlet","text":"","code":"# single alpha alpha <- c(1,2,3) x <- rdirichlet(1, alpha) d <- ddirichlet(x, alpha) # vectorised over alpha alpha <- rbind(alpha, 2*alpha) x <- rdirichlet(2, alpha)"},{"path":"https://janoleko.github.io/RTMBdist/reference/dirmult.html","id":null,"dir":"Reference","previous_headings":"","what":"Dirichlet-multinomial distribution — dirmult","title":"Dirichlet-multinomial distribution — dirmult","text":"Density random generation Dirichlet-multinomial distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dirmult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dirichlet-multinomial distribution — dirmult","text":"","code":"ddirmult(x, size, alpha, log = FALSE)  rdirmult(n, size, alpha)"},{"path":"https://janoleko.github.io/RTMBdist/reference/dirmult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dirichlet-multinomial distribution — dirmult","text":"x vector matrix non-negative counts, rows observations columns categories. size vector total counts observation. Needs match row sums x. alpha vector matrix positive shape parameters log logical; TRUE, densities \\(p\\) returned \\(\\log(p)\\). n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dirmult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dirichlet-multinomial distribution — dirmult","text":"ddirmult gives density rdirmult generates random samples.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dirmult.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dirichlet-multinomial distribution — dirmult","text":"implementation ddirmult allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/dirmult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dirichlet-multinomial distribution — dirmult","text":"","code":"# single alpha alpha <- c(1,2,3) size <- 10 x <- rdirmult(1, size, alpha) d <- ddirmult(x, size, alpha) # vectorised over alpha and size alpha <- rbind(alpha, 2*alpha) size <- c(size, 3*size) x <- rdirmult(2, size, alpha)"},{"path":"https://janoleko.github.io/RTMBdist/reference/erf.html","id":null,"dir":"Reference","previous_headings":"","what":"AD-compatible error function and complementary error function — erf","title":"AD-compatible error function and complementary error function — erf","text":"AD-compatible error function complementary error function","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/erf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AD-compatible error function and complementary error function — erf","text":"","code":"erf(x)  erfc(x)"},{"path":"https://janoleko.github.io/RTMBdist/reference/erf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AD-compatible error function and complementary error function — erf","text":"x vector evaluation points","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/erf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AD-compatible error function and complementary error function — erf","text":"erf(x) returns error function erfc(x) returns complementary error function.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/erf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AD-compatible error function and complementary error function — erf","text":"","code":"erf(1) #> [1] 0.8427008 erfc(1) #> [1] 0.1572992"},{"path":"https://janoleko.github.io/RTMBdist/reference/exgauss.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponentially modified Gaussian distribution — exgauss","title":"Exponentially modified Gaussian distribution — exgauss","text":"Density, distribution function, quantile function, random generation exponentially modified Gaussian distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/exgauss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exponentially modified Gaussian distribution — exgauss","text":"","code":"dexgauss(x, mu = 0, sigma = 1, lambda = 1, log = FALSE)  pexgauss(q, mu = 0, sigma = 1, lambda = 1, lower.tail = TRUE, log.p = FALSE)  qexgauss(p, mu = 0, sigma = 1, lambda = 1, lower.tail = TRUE, log.p = FALSE)  rexgauss(n, mu = 0, sigma = 1, lambda = 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/exgauss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponentially modified Gaussian distribution — exgauss","text":"x, q vector quantiles mu mean parameter Gaussian part sigma standard deviation parameter Gaussian part, must positive. lambda rate parameter exponential part, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/exgauss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponentially modified Gaussian distribution — exgauss","text":"dexgauss gives density, pexgauss gives distribution function, qexgauss gives quantile function, rexgauss generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/exgauss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exponentially modified Gaussian distribution — exgauss","text":"implementation dexgauss pexgauss allows automatic differentiation RTMB. qexgauss reparameterised import gamlss.dist::qexGAUS. \\(X \\sim N(\\mu, \\sigma^2)\\) \\(Y \\sim \\text{Exp}(\\lambda)\\), \\(Z = X + Y\\) follows exponentially modified Gaussian distribution parameters \\(\\mu\\), \\(\\sigma\\), \\(\\lambda\\).","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/exgauss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponentially modified Gaussian distribution — exgauss","text":"","code":"x <- rexgauss(1, 1, 2, 2) d <- dexgauss(x, 1, 2, 2) p <- pexgauss(x, 1, 2, 2) q <- qexgauss(p, 1, 2, 2)"},{"path":"https://janoleko.github.io/RTMBdist/reference/foldnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Folded normal distribution — foldnorm","title":"Folded normal distribution — foldnorm","text":"Density, distribution function, random generation folded normal distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/foldnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Folded normal distribution — foldnorm","text":"","code":"dfoldnorm(x, mu = 0, sigma = 1, log = FALSE)  pfoldnorm(q, mu = 0, sigma = 1, lower.tail = TRUE, log.p = FALSE)  rfoldnorm(n, mu = 0, sigma = 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/foldnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Folded normal distribution — foldnorm","text":"x, q vector quantiles mu location parameter sigma scale parameter, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return p vector probabilities","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/foldnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Folded normal distribution — foldnorm","text":"dfoldnorm gives density, pfoldnorm gives distribution function, rfoldnorm generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/foldnorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Folded normal distribution — foldnorm","text":"implementation dfoldnorm allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/foldnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Folded normal distribution — foldnorm","text":"","code":"x <- rfoldnorm(1, 1, 2) d <- dfoldnorm(x, 1, 2) p <- pfoldnorm(x, 1, 2)"},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":null,"dir":"Reference","previous_headings":"","what":"Reparameterised gamma distribution — gamma2","title":"Reparameterised gamma distribution — gamma2","text":"Density, distribution function, quantile function, random generation gamma distribution reparameterised terms mean standard deviation.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reparameterised gamma distribution — gamma2","text":"","code":"dgamma2(x, mean = 1, sd = 1, log = FALSE)  pgamma2(q, mean = 1, sd = 1, lower.tail = TRUE, log.p = FALSE)  qgamma2(p, mean = 1, sd = 1, lower.tail = TRUE, log.p = FALSE)  rgamma2(n, mean = 1, sd = 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reparameterised gamma distribution — gamma2","text":"x, q vector quantiles mean mean parameter, must positive. sd standard deviation parameter, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reparameterised gamma distribution — gamma2","text":"dgamma2 gives density, pgamma2 gives distribution function, qgamma2 gives quantile function, rgamma2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reparameterised gamma distribution — gamma2","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gamma2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reparameterised gamma distribution — gamma2","text":"","code":"x <- rgamma2(1) d <- dgamma2(x) p <- pgamma2(x) q <- qgamma2(p)"},{"path":"https://janoleko.github.io/RTMBdist/reference/genpois.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalised Poisson distribution — genpois","title":"Generalised Poisson distribution — genpois","text":"Probability mass function, distribution function, random generation generalised Poisson distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/genpois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalised Poisson distribution — genpois","text":"","code":"dgenpois(x, lambda = 1, phi = 1, log = FALSE)  pgenpois(q, lambda = 1, phi = 1, lower.tail = TRUE, log.p = FALSE)  qgenpois(lambda = 1, phi = 1,          lower.tail = TRUE, log.p = FALSE, max.value = 10000)  rgenpois(n, lambda = 1, phi = 1, max.value = 10000)"},{"path":"https://janoleko.github.io/RTMBdist/reference/genpois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalised Poisson distribution — genpois","text":"x, q integer vector counts lambda vector positive means phi vector non-negative dispersion parameters log, log.p logical; return log-density TRUE lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities max.value constant, set default value 10000 far algorithm look q. n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/genpois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalised Poisson distribution — genpois","text":"dgenpois gives probability mass function, pgenpois gives distribution function, qgenpois gives quantile function, rgenpois generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/genpois.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalised Poisson distribution — genpois","text":"implementation dgenpois allows automatic differentiation RTMB. functions imported gamlss.dist::GPO. distribution mean \\(\\lambda\\) variance \\(\\lambda(1 + \\phi \\lambda)^2\\). \\(\\phi = 0\\) reduces Poisson distribution, however \\(\\phi\\) must strictly positive .","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/genpois.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalised Poisson distribution — genpois","text":"","code":"set.seed(123) x <- rgenpois(1, 2, 3) d <- dgenpois(x, 2, 3) p <- pgenpois(x, 2, 3) q <- qgenpois(p, 2, 3)"},{"path":"https://janoleko.github.io/RTMBdist/reference/gumbel.html","id":null,"dir":"Reference","previous_headings":"","what":"Gumbel distribution — gumbel","title":"Gumbel distribution — gumbel","text":"Density, distribution function, quantile function, random generation Gumbel distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gumbel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gumbel distribution — gumbel","text":"","code":"dgumbel(x, location = 0, scale = 1, log = FALSE)  pgumbel(q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)  qgumbel(p, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)  rgumbel(n, location = 0, scale = 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/gumbel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gumbel distribution — gumbel","text":"x, q vector quantiles location location parameter scale scale parameter, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gumbel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gumbel distribution — gumbel","text":"dgumbel gives density, pgumbel gives distribution function, qgumbel gives quantile function, rgumbel generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gumbel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gumbel distribution — gumbel","text":"implementation dgumbel allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/gumbel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gumbel distribution — gumbel","text":"","code":"x <- rgumbel(1, 0.5, 2) d <- dgumbel(x, 0.5, 2) p <- pgumbel(x, 0.5, 2) q <- qgumbel(p, 0.5, 2)"},{"path":"https://janoleko.github.io/RTMBdist/reference/invgauss.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse Gaussian distribution — invgauss","title":"Inverse Gaussian distribution — invgauss","text":"Density, distribution function, random generation inverse Gaussian distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/invgauss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse Gaussian distribution — invgauss","text":"","code":"dinvgauss(x, mean = 1, shape = 1, log = FALSE)  pinvgauss(q, mean = 1, shape = 1, lower.tail = TRUE, log.p = FALSE)  qinvgauss(p, mean = 1, shape = 1, lower.tail = TRUE, log.p = FALSE, ...)  rinvgauss(n, mean = 1, shape = 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/invgauss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse Gaussian distribution — invgauss","text":"x, q vector quantiles, must positive. mean location parameter shape shape parameter, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities ... additional parameter passed statmod::qinvgauss numerical evaluation quantile function. n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/invgauss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse Gaussian distribution — invgauss","text":"dinvgauss gives density, pinvgauss gives distribution function, qinvgauss gives quantile function, rinvgauss generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/invgauss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inverse Gaussian distribution — invgauss","text":"implementation dinvgauss allows automatic differentiation RTMB. qinvgauss rinvgauss imported statmod package.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/invgauss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse Gaussian distribution — invgauss","text":"","code":"x <- rinvgauss(1, 1, 0.5) d <- dinvgauss(x, 1, 0.5) p <- pinvgauss(x, 1, 0.5) q <- qinvgauss(p, 1, 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/laplace.html","id":null,"dir":"Reference","previous_headings":"","what":"Laplace distribution — laplace","title":"Laplace distribution — laplace","text":"Density, distribution function, quantile function, random generation Laplace distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/laplace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Laplace distribution — laplace","text":"","code":"dlaplace(x, mu = 0, b = 1, log = FALSE)  plaplace(q, mu = 0, b = 1, lower.tail = TRUE, log.p = FALSE)  qlaplace(p, mu = 0, b = 1, lower.tail = TRUE, log.p = FALSE)  rlaplace(n, mu = 0, b = 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/laplace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Laplace distribution — laplace","text":"x, q vector quantiles mu location parameter b scale parameter, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/laplace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Laplace distribution — laplace","text":"dlaplace gives density, plaplace gives distribution function, qlaplace gives quantile function, rlaplace generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/laplace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Laplace distribution — laplace","text":"implementation dlaplace allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/laplace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Laplace distribution — laplace","text":"","code":"x <- rlaplace(1, 1, 1) d <- dlaplace(x, 1, 1) p <- plaplace(x, 1, 1) q <- qlaplace(p, 1, 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/nbinom2.html","id":null,"dir":"Reference","previous_headings":"","what":"Reparameterised negative binomial distribution — nbinom2","title":"Reparameterised negative binomial distribution — nbinom2","text":"Probability mass function, distribution function, quantile function, random generation negative binomial distribution reparameterised terms mean size.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/nbinom2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reparameterised negative binomial distribution — nbinom2","text":"","code":"dnbinom2(x, mu, size, log = FALSE)  pnbinom2(q, mu, size, lower.tail = TRUE, log.p = FALSE)  qnbinom2(p, mu, size, lower.tail = TRUE, log.p = FALSE)  rnbinom2(n, mu, size)  pnbinom(q, size, prob, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://janoleko.github.io/RTMBdist/reference/nbinom2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reparameterised negative binomial distribution — nbinom2","text":"x, q vector quantiles mu mean parameter, must positive. size size parameter, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities n number random values return. prob probability success trial. 0 < prob <= 1.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/nbinom2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reparameterised negative binomial distribution — nbinom2","text":"dnbinom2 gives density, pnbinom2 gives distribution function, qnbinom2 gives quantile function, rnbinom2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/nbinom2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reparameterised negative binomial distribution — nbinom2","text":"implementation allows automatic differentiation RTMB. pnbinom AD-compatible implementation standard parameterisation CDF, missing RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/nbinom2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reparameterised negative binomial distribution — nbinom2","text":"","code":"set.seed(123) x <- rnbinom2(1, 1, 2) d <- dnbinom2(x, 1, 2) p <- pnbinom2(x, 1, 2) q <- qnbinom2(p, 1, 2)"},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta.html","id":null,"dir":"Reference","previous_headings":"","what":"One-inflated beta distribution — oibeta","title":"One-inflated beta distribution — oibeta","text":"Density, distribution function, random generation one-inflated beta distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One-inflated beta distribution — oibeta","text":"","code":"doibeta(x, shape1, shape2, oneprob = 0, log = FALSE)  poibeta(q, shape1, shape2, oneprob = 0, lower.tail = TRUE, log.p = FALSE)  roibeta(n, shape1, shape2, oneprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One-inflated beta distribution — oibeta","text":"x, q vector quantiles shape1, shape2 non-negative shape parameters beta distribution oneprob zero-inflation probability 0 1. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One-inflated beta distribution — oibeta","text":"doibeta gives density, poibeta gives distribution function, roibeta generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"One-inflated beta distribution — oibeta","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One-inflated beta distribution — oibeta","text":"","code":"set.seed(123) x <- roibeta(1, 2, 2, 0.5) d <- doibeta(x, 2, 2, 0.5) p <- poibeta(x, 2, 2, 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta2.html","id":null,"dir":"Reference","previous_headings":"","what":"Reparameterised one-inflated beta distribution — oibeta2","title":"Reparameterised one-inflated beta distribution — oibeta2","text":"Density, distribution function, random generation one-inflated beta distribution reparameterised terms mean concentration.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reparameterised one-inflated beta distribution — oibeta2","text":"","code":"doibeta2(x, mu, phi, oneprob = 0, log = FALSE)  poibeta2(q, mu, phi, oneprob = 0, lower.tail = TRUE, log.p = FALSE)  roibeta2(n, mu, phi, oneprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reparameterised one-inflated beta distribution — oibeta2","text":"x, q vector quantiles mu mean parameter, must interval 0 1. phi concentration parameter, must positive. oneprob zero-inflation probability 0 1. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reparameterised one-inflated beta distribution — oibeta2","text":"doibeta2 gives density, poibeta2 gives distribution function, roibeta2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reparameterised one-inflated beta distribution — oibeta2","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/oibeta2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reparameterised one-inflated beta distribution — oibeta2","text":"","code":"set.seed(123) x <- roibeta2(1, 0.6, 2, 0.5) d <- doibeta2(x, 0.6, 2, 0.5) p <- poibeta2(x, 0.6, 2, 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Skew normal distribution — skewnorm","title":"Skew normal distribution — skewnorm","text":"Density, distribution function, quantile function, random generation skew normal distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skew normal distribution — skewnorm","text":"","code":"dskewnorm(x, xi = 0, omega = 1, alpha = 0, log = FALSE)  pskewnorm(q, xi = 0, omega = 1, alpha = 0, ...)  qskewnorm(p, xi = 0, omega = 1, alpha = 0, ...)  rskewnorm(n, xi = 0, omega = 1, alpha = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skew normal distribution — skewnorm","text":"x, q vector quantiles xi location parameter omega scale parameter, must positive. alpha skewness parameter, +/- Inf allowed. log logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). ... additional parameters passed sn package functions pskewnorm qskewnorm. p vector probabilities n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skew normal distribution — skewnorm","text":"dskewnorm gives density, pskewnorm gives distribution function, qskewnorm gives quantile function, rskewnorm generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Skew normal distribution — skewnorm","text":"implementation dskewnorm allows automatic differentiation RTMB functions imported sn package.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Skew normal distribution — skewnorm","text":"","code":"# alpha is skew parameter x <- rskewnorm(1, alpha = 1) d <- dskewnorm(x, alpha = 1) p <- pskewnorm(x, alpha = 1) q <- qskewnorm(p, alpha = 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm2.html","id":null,"dir":"Reference","previous_headings":"","what":"Reparameterised skew normal distribution — skewnorm2","title":"Reparameterised skew normal distribution — skewnorm2","text":"Density, distribution function, quantile function random generation skew normal distribution reparameterised terms mean, standard deviation skew magnitude","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reparameterised skew normal distribution — skewnorm2","text":"","code":"dskewnorm2(x, mean = 0, sd = 1, alpha = 0, log = FALSE)  pskewnorm2(q, mean = 0, sd = 1, alpha = 0, ...)  qskewnorm2(p, mean = 0, sd = 1, alpha = 0, ...)  rskewnorm2(n, mean = 0, sd = 1, alpha = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reparameterised skew normal distribution — skewnorm2","text":"x, q vector quantiles mean mean parameter sd standard deviation, must positive. alpha skewness parameter, +/- Inf allowed. log logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). ... additional parameters passed sn package functions pskewnorm qskewnorm. p vector probabilities n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reparameterised skew normal distribution — skewnorm2","text":"dskewnorm2 gives density, pskewnorm2 gives distribution function, qskewnorm2 gives quantile function, rskewnorm2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reparameterised skew normal distribution — skewnorm2","text":"implementation dskewnorm2 allows automatic differentiation RTMB functions imported sn package.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewnorm2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reparameterised skew normal distribution — skewnorm2","text":"","code":"# alpha is skew parameter x <- rskewnorm2(1, alpha = 1) d <- dskewnorm2(x, alpha = 1) p <- pskewnorm2(x, alpha = 1) q <- qskewnorm2(p, alpha = 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/skewt.html","id":null,"dir":"Reference","previous_headings":"","what":"Skewed students t distribution — skewt","title":"Skewed students t distribution — skewt","text":"Density, distribution function, quantile function, random generation skew t distribution (type 2).","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skewed students t distribution — skewt","text":"","code":"dskewt(x, mu = 0, sigma = 1, skew = 0, df = 1000, log = FALSE)  pskewt(q, mu = 0, sigma = 1, skew = 0, df = 1000,        method = 0, lower.tail = TRUE, log.p = FALSE)  qskewt(p, mu = 0, sigma = 1, skew = 0, df = 1000,        tol = 1e-8, method = 0)  rskewt(n, mu = 0, sigma = 1, skew = 0, df = 1000)"},{"path":"https://janoleko.github.io/RTMBdist/reference/skewt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skewed students t distribution — skewt","text":"x, q vector quantiles mu location parameter sigma scale parameter, must positive. skew skewness parameter, can positive negative. df degrees freedom, must positive. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). method integer value 0 5 selects computing method; see ‘Details’ pst documentation meaning values. method=0 (default value), automatic choice made among four actual computing methods, depending arguments. lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities tol scalar value regulates accuracy result qsn, measured probability scale. n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skewed students t distribution — skewt","text":"dskewt gives density, pskewt gives distribution function, qskewt gives quantile function, rskewt generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Skewed students t distribution — skewt","text":"corresponds skew t type 2 distribution GAMLSS (ST2), see pp. 411-412 Rigby et al. (2019) version implemented sn package. implementation dskewt allows automatic differentiation RTMB functions imported sn package. Caution: numerial optimisation, skew parameter NEVER initialised exactly zero. cause initial subsequent derivatives exactly zero hence parameter remain initial value.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/skewt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Skewed students t distribution — skewt","text":"","code":"x <- rskewt(1, 1, 2, 5, 2) d <- dskewt(x, 1, 2, 5, 2) p <- pskewt(x, 1, 2, 5, 2) q <- qskewt(p, 1, 2, 5, 2)"},{"path":"https://janoleko.github.io/RTMBdist/reference/t2.html","id":null,"dir":"Reference","previous_headings":"","what":"Non-central and scaled students t distribution — t2","title":"Non-central and scaled students t distribution — t2","text":"Density, distribution function, quantile function, random generation t distribution non-centrality scale parameters.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/t2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Non-central and scaled students t distribution — t2","text":"","code":"dt2(x, mu, sigma, df, log = FALSE)  pt2(q, mu, sigma, df)  rt2(n, mu, sigma, df)  qt2(p, mu, sigma, df)"},{"path":"https://janoleko.github.io/RTMBdist/reference/t2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Non-central and scaled students t distribution — t2","text":"x, q vector quantiles mu location parameter sigma scale parameter, must positive. df degrees freedom, must positive. log logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). n number random values return. p vector probabilities","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/t2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Non-central and scaled students t distribution — t2","text":"dt2 gives density, pt2 gives distribution function, qt2 gives quantile function, rt2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/t2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Non-central and scaled students t distribution — t2","text":"implementation dt2 allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/t2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Non-central and scaled students t distribution — t2","text":"","code":"x <- rt2(1, 1, 2, 5) d <- dt2(x, 1, 2, 5) p <- pt2(x, 1, 2, 5) q <- qt2(p, 1, 2, 5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/truncnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncated normal distribution — truncnorm","title":"Truncated normal distribution — truncnorm","text":"Density, distribution function, quantile function, random generation truncated normal distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/truncnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncated normal distribution — truncnorm","text":"","code":"dtruncnorm(x, mean = 0, sd = 1, min = -Inf, max = Inf, log = FALSE)  ptruncnorm(q, mean = 0, sd = 1, min = -Inf, max = Inf,            lower.tail = TRUE, log.p = FALSE)  qtruncnorm(p, mean = 0, sd = 1, min = -Inf, max = Inf,            lower.tail = TRUE, log.p = FALSE)  rtruncnorm(n, mean = 0, sd = 1, min = -Inf, max = Inf)"},{"path":"https://janoleko.github.io/RTMBdist/reference/truncnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncated normal distribution — truncnorm","text":"x, q vector quantiles mean mean parameter, must positive. sd standard deviation parameter, must positive. min, max truncation bounds. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/truncnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncated normal distribution — truncnorm","text":"dtruncnorm gives density, ptruncnorm gives distribution function, qtruncnorm gives quantile function, rtruncnorm generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/truncnorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Truncated normal distribution — truncnorm","text":"implementation dtruncnorm allows automatic differentiation RTMB. Caution: x parameter dependent introduces non-differentiability.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/truncnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Truncated normal distribution — truncnorm","text":"","code":"x <- rtruncnorm(1, mean = 2, sd = 2, min = -1, max = 5) d <- dtruncnorm(x, mean = 2, sd = 2, min = -1, max = 5) p <- ptruncnorm(x, mean = 2, sd = 2, min = -1, max = 5) q <- qtruncnorm(p, mean = 2, sd = 2, min = -1, max = 5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":null,"dir":"Reference","previous_headings":"","what":"von Mises distribution — vm","title":"von Mises distribution — vm","text":"Density, distribution function, random generation von Mises distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"von Mises distribution — vm","text":"","code":"dvm(x, mu = 0, kappa = 1, log = FALSE)  pvm(q, mu = 0, kappa = 1, from = NULL, tol = 1e-20)  rvm(n, mu = 0, kappa = 1, wrap = TRUE)"},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"von Mises distribution — vm","text":"x, q vector angles measured radians evaluate density function. mu mean direction distribution measured radians. kappa non-negative numeric value concentration parameter distribution. log logical; TRUE, densities returned log scale. value integration CDF starts. NULL, set mu - pi. tol precision evaluating distribution function n number random values return. wrap logical; TRUE, generated angles wrapped interval -pi pi.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"von Mises distribution — vm","text":"dvm gives density, pvm gives distribution function, rvm generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"von Mises distribution — vm","text":"implementation dvm allows automatic differentiation RTMB. rvm pvm simply wrappers corresponding functions circular.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"von Mises distribution — vm","text":"","code":"set.seed(1) x <- rvm(10, 0, 1) d <- dvm(x, 0, 1) p <- pvm(x, 0, 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf.html","id":null,"dir":"Reference","previous_headings":"","what":"von Mises-Fisher distribution — vmf","title":"von Mises-Fisher distribution — vmf","text":"Density, distribution function, random generation von Mises-Fisher distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"von Mises-Fisher distribution — vmf","text":"","code":"dvmf(x, mu, kappa, log = FALSE)  rvmf(n, mu, kappa)"},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"von Mises-Fisher distribution — vmf","text":"x unit vector matrix (row unit vector) evaluation points mu unit mean vector kappa non-negative numeric value concentration parameter distribution. log logical; TRUE, densities returned log scale. n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"von Mises-Fisher distribution — vmf","text":"dvmf gives density rvm generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"von Mises-Fisher distribution — vmf","text":"implementation dvmf allows automatic differentiation RTMB. rvmf reparameterised import movMF::rmovMF.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"von Mises-Fisher distribution — vmf","text":"","code":"set.seed(123) # single parameter set mu <- rep(1, 3) / sqrt(3) kappa <- 4 x <- rvmf(1, mu, kappa) d <- dvmf(x, mu, kappa)  # vectorised over parameters mu <- matrix(mu, nrow = 1) mu <- mu[rep(1,10), ] kappa <- rep(kappa, 10) x <- rvmf(10, mu, kappa) d <- dvmf(x, mu, kappa)"},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf2.html","id":null,"dir":"Reference","previous_headings":"","what":"Reparameterised von Mises-Fisher distribution — vmf2","title":"Reparameterised von Mises-Fisher distribution — vmf2","text":"Density, distribution function, random generation von Mises-Fisher distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reparameterised von Mises-Fisher distribution — vmf2","text":"","code":"dvmf2(x, theta, log = FALSE)  rvmf2(n, theta)"},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reparameterised von Mises-Fisher distribution — vmf2","text":"x unit vector matrix (row unit vector) evaluation points theta direction concentration vector. direction theta determines mean direction sphere. norm theta concentration parameter distribution. log logical; TRUE, densities returned log scale. n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reparameterised von Mises-Fisher distribution — vmf2","text":"dvmf gives density rvm generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reparameterised von Mises-Fisher distribution — vmf2","text":"parameterisation, \\(\\theta = \\kappa \\mu\\), \\(\\mu\\) unit vector \\(\\kappa\\) concentration parameter. dvmf2 allows automatic differentiation RTMB. rvmf2 imported movMF::rmovMF.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/vmf2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reparameterised von Mises-Fisher distribution — vmf2","text":"","code":"set.seed(123) # single parameter set theta <- c(1,2,3) x <- rvmf2(1, theta) d <- dvmf2(x, theta)  # vectorised over parameters theta <- matrix(theta, nrow = 1) theta <- theta[rep(1,10), ] x <- rvmf2(10, theta) d <- dvmf2(x, theta)"},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapped Cauchy distribution — wrpcauchy","title":"wrapped Cauchy distribution — wrpcauchy","text":"Density random generation wrapped Cauchy distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapped Cauchy distribution — wrpcauchy","text":"","code":"dwrpcauchy(x, mu = 0, rho, log = FALSE)  rwrpcauchy(n, mu = 0, rho, wrap = TRUE)"},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapped Cauchy distribution — wrpcauchy","text":"x vector angles measured radians evaluate density function. mu mean direction distribution measured radians. rho concentration parameter distribution, must interval 0 1. log logical; TRUE, densities returned log scale. n number random values return. wrap logical; TRUE, generated angles wrapped interval -pi pi.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapped Cauchy distribution — wrpcauchy","text":"dwrpcauchy gives density rwrpcauchy generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"wrapped Cauchy distribution — wrpcauchy","text":"implementation dwrpcauchy allows automatic differentiation RTMB. rwrpcauchy simply wrapper rwrappedcauchyimported circular.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/wrpcauchy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wrapped Cauchy distribution — wrpcauchy","text":"","code":"set.seed(1) x <- rwrpcauchy(10, 0, 1) d <- dwrpcauchy(x, 0, 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zero_inflate.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated density constructer — zero_inflate","title":"Zero-inflated density constructer — zero_inflate","text":"Constructs zero-inflated density function given probability density function","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zero_inflate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated density constructer — zero_inflate","text":"","code":"zero_inflate(dist, discrete = NULL)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zero_inflate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated density constructer — zero_inflate","text":"dist either probability density function probability mass function discrete logical; TRUE, density x = 0 zeroprob + (1-zeroprob) * dist(0, ...). Otherwise just zeroprob. standard cases, determined automatically. non-standard cases, set TRUE FALSE depending type dist. See details.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zero_inflate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated density constructer — zero_inflate","text":"zero-inflated density function first argument x, second argument zeroprob, additional arguments ... passed dist.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zero_inflate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated density constructer — zero_inflate","text":"definition zero-inflation different discrete continuous distributions. discrete distributions p.m.f. \\(f\\) zero-inflation probability \\(p\\), $$\\Pr(X = 0) = p + (1 - p) \\cdot f(0),$$ $$\\Pr(X = x) = (1 - p) \\cdot f(x), \\quad x > 0.$$ continuous distributions p.d.f. \\(f\\), $$f_{\\text{zinfl}}(x) = p \\cdot \\delta_0(x) + (1 - p) \\cdot f(x),$$ \\(\\delta_0\\) Dirac delta function zero.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zero_inflate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated density constructer — zero_inflate","text":"","code":"# Zero-inflated normal distribution dzinorm <- zero_inflate(dnorm) dzinorm(c(NA, 0, 2), 0.5, mean = 1, sd = 1) #> [1]        NA 0.5000000 0.1209854  # Zero-inflated Poisson distribution zipois <- zero_inflate(dpois) zipois(c(NA, 0, 1), 0.5, 1) #> [1]        NA 0.6839397 0.1839397  # Non-standard case: Zero-inflated reparametrised beta distribution dzibeta2 <- zero_inflate(dbeta2, discrete = FALSE)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated beta distribution — zibeta","title":"Zero-inflated beta distribution — zibeta","text":"Density, distribution function, random generation zero-inflated beta distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated beta distribution — zibeta","text":"","code":"dzibeta(x, shape1, shape2, zeroprob = 0, log = FALSE)  pzibeta(q, shape1, shape2, zeroprob = 0, lower.tail = TRUE, log.p = FALSE)  rzibeta(n, shape1, shape2, zeroprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated beta distribution — zibeta","text":"x, q vector quantiles shape1, shape2 non-negative shape parameters beta distribution zeroprob zero-inflation probability 0 1. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated beta distribution — zibeta","text":"dzibeta gives density, pzibeta gives distribution function, rzibeta generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated beta distribution — zibeta","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated beta distribution — zibeta","text":"","code":"set.seed(123) x <- rzibeta(1, 2, 2, 0.5) d <- dzibeta(x, 2, 2, 0.5) p <- pzibeta(x, 2, 2, 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta2.html","id":null,"dir":"Reference","previous_headings":"","what":"Reparameterised zero-inflated beta distribution — zibeta2","title":"Reparameterised zero-inflated beta distribution — zibeta2","text":"Density, distribution function, random generation zero-inflated beta distribution reparameterised terms mean concentration.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reparameterised zero-inflated beta distribution — zibeta2","text":"","code":"dzibeta2(x, mu, phi, zeroprob = 0, log = FALSE)  pzibeta2(q, mu, phi, zeroprob = 0, lower.tail = TRUE, log.p = FALSE)  rzibeta2(n, mu, phi, zeroprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reparameterised zero-inflated beta distribution — zibeta2","text":"x, q vector quantiles mu mean parameter, must interval 0 1. phi concentration parameter, must positive. zeroprob zero-inflation probability 0 1. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE (default), probabilities \\(P[X \\leq x]\\), otherwise \\(P[X > x]\\). n number random values return. p vector probabilities","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reparameterised zero-inflated beta distribution — zibeta2","text":"dzibeta2 gives density, pzibeta2 gives distribution function, rzibeta2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reparameterised zero-inflated beta distribution — zibeta2","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibeta2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reparameterised zero-inflated beta distribution — zibeta2","text":"","code":"set.seed(123) x <- rzibeta2(1, 0.5, 1, 0.5) d <- dzibeta2(x, 0.5, 1, 0.5) p <- pzibeta2(x, 0.5, 1, 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zibinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated binomial distribution — zibinom","title":"Zero-inflated binomial distribution — zibinom","text":"Probability mass function, distribution function, random generation zero-inflated binomial distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated binomial distribution — zibinom","text":"","code":"dzibinom(x, size, prob, zeroprob = 0, log = FALSE)  pzibinom(q, size, prob, zeroprob = 0, lower.tail = TRUE, log.p = FALSE)  rzibinom(n, size, prob, zeroprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zibinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated binomial distribution — zibinom","text":"x, q vector quantiles size number trials (zero ). prob probability success trial. zeroprob zero-inflation probability 0 1 log, log.p logical; return log-density TRUE lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated binomial distribution — zibinom","text":"dzibinom gives probability mass function, pzibinom gives distribution function, rzibinom generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibinom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated binomial distribution — zibinom","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zibinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated binomial distribution — zibinom","text":"","code":"set.seed(123) x <- rzibinom(1, size = 10, prob = 0.5, zeroprob = 0.5) d <- dzibinom(x, size = 10, prob = 0.5, zeroprob = 0.5) p <- pzibinom(x, size = 10, prob = 0.5, zeroprob = 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated gamma distribution — zigamma","title":"Zero-inflated gamma distribution — zigamma","text":"Density, distribution function, random generation zero-inflated gamma distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated gamma distribution — zigamma","text":"","code":"dzigamma(x, shape, scale, zeroprob = 0, log = FALSE)  pzigamma(q, shape, scale, zeroprob = 0, lower.tail = TRUE, log.p = FALSE)  rzigamma(n, shape, scale, zeroprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated gamma distribution — zigamma","text":"x, q vector quantiles shape positive shape parameter scale positive scale parameter zeroprob zero-inflation probability 0 1. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated gamma distribution — zigamma","text":"dzigamma gives density, pzigamma gives distribution function, rzigamma generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated gamma distribution — zigamma","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated gamma distribution — zigamma","text":"","code":"x <- rzigamma(1, 1, 1, 0.5) d <- dzigamma(x, 1, 1, 0.5) p <- pzigamma(x, 1, 1, 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma2.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated and reparameterised gamma distribution — zigamma2","title":"Zero-inflated and reparameterised gamma distribution — zigamma2","text":"Density, distribution function, random generation zero-inflated gamma distribution reparameterised terms mean standard deviation.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated and reparameterised gamma distribution — zigamma2","text":"","code":"dzigamma2(x, mean = 1, sd = 1, zeroprob = 0, log = FALSE)  pzigamma2(q, mean = 1, sd = 1, zeroprob = 0)  rzigamma2(n, mean = 1, sd = 1, zeroprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated and reparameterised gamma distribution — zigamma2","text":"x, q vector quantiles mean mean parameter, must positive. sd standard deviation parameter, must positive. zeroprob zero-inflation probability 0 1. log logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated and reparameterised gamma distribution — zigamma2","text":"dzigamma2 gives density, pzigamma2 gives distribution function, rzigamma generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated and reparameterised gamma distribution — zigamma2","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zigamma2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated and reparameterised gamma distribution — zigamma2","text":"","code":"x <- rzigamma2(1, 2, 1, 0.5) d <- dzigamma2(x, 2, 1, 0.5) p <- pzigamma2(x, 2, 1, 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/ziinvgauss.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated inverse Gaussian distribution — ziinvgauss","title":"Zero-inflated inverse Gaussian distribution — ziinvgauss","text":"Density, distribution function, random generation zero-inflated inverse Gaussian distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/ziinvgauss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated inverse Gaussian distribution — ziinvgauss","text":"","code":"dziinvgauss(x, mean = 1, shape = 1, zeroprob = 0, log = FALSE)  pziinvgauss(q, mean = 1, shape = 1, zeroprob = 0, lower.tail = TRUE, log.p = FALSE)  rziinvgauss(n, mean = 1, shape = 1, zeroprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/ziinvgauss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated inverse Gaussian distribution — ziinvgauss","text":"x, q vector quantiles mean location parameter shape shape parameter, must positive. zeroprob zero-probability, must \\([0, 1]\\). log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/ziinvgauss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated inverse Gaussian distribution — ziinvgauss","text":"dziinvgauss gives density, pziinvgauss gives distribution function, rziinvgauss generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/ziinvgauss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated inverse Gaussian distribution — ziinvgauss","text":"implementation zidinvgauss allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/ziinvgauss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated inverse Gaussian distribution — ziinvgauss","text":"","code":"x <- rziinvgauss(1, 1, 2, 0.5) d <- dziinvgauss(x, 1, 2, 0.5) p <- pziinvgauss(x, 1, 2, 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated negative binomial distribution — zinbinom","title":"Zero-inflated negative binomial distribution — zinbinom","text":"Probability mass function, distribution function, quantile function, random generation zero-inflated negative binomial distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated negative binomial distribution — zinbinom","text":"","code":"dzinbinom(x, size, prob, zeroprob = 0, log = FALSE)  pzinbinom(q, size, prob, zeroprob = 0, lower.tail = TRUE, log.p = FALSE)  rzinbinom(n, size, prob, zeroprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated negative binomial distribution — zinbinom","text":"x, q vector (non-negative integer) quantiles size size parameter, must positive. prob mean parameter, must positive. zeroprob zero-inflation probability 0 1. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return. p vector probabilities","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated negative binomial distribution — zinbinom","text":"dzinbinom gives density, pzinbinom gives distribution function, rzinbinom generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated negative binomial distribution — zinbinom","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated negative binomial distribution — zinbinom","text":"","code":"set.seed(123) x <- rzinbinom(1, size = 2, prob = 0.5, zeroprob = 0.5) d <- dzinbinom(x, size = 2, prob = 0.5, zeroprob = 0.5) p <- pzinbinom(x, size = 2, prob = 0.5, zeroprob = 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom2.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated and reparameterised negative binomial distribution — zinbinom2","title":"Zero-inflated and reparameterised negative binomial distribution — zinbinom2","text":"Probability mass function, distribution function, quantile function random generation zero-inflated negative binomial distribution reparameterised terms mean size.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated and reparameterised negative binomial distribution — zinbinom2","text":"","code":"dzinbinom2(x, mu, size, zeroprob = 0, log = FALSE)  pzinbinom2(q, mu, size, zeroprob = 0, lower.tail = TRUE, log.p = FALSE)  rzinbinom2(n, mu, size, zeroprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated and reparameterised negative binomial distribution — zinbinom2","text":"x, q vector (non-negative integer) quantiles mu mean parameter, must positive. size size parameter, must positive. zeroprob zero-inflation probability 0 1. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return. p vector probabilities","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated and reparameterised negative binomial distribution — zinbinom2","text":"dzinbinom2 gives density, pzinbinom2 gives distribution function, rzinbinom2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated and reparameterised negative binomial distribution — zinbinom2","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zinbinom2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated and reparameterised negative binomial distribution — zinbinom2","text":"","code":"set.seed(123) x <- rzinbinom2(1, 2, 1, zeroprob = 0.5) d <- dzinbinom2(x, 2, 1, zeroprob = 0.5) p <- pzinbinom2(x, 2, 1, zeroprob = 0.5)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zipois.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated Poisson distribution — zipois","title":"Zero-inflated Poisson distribution — zipois","text":"Probability mass function, distribution function, random generation zero-inflated Poisson distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zipois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated Poisson distribution — zipois","text":"","code":"dzipois(x, lambda, zeroprob = 0, log = FALSE)  pzipois(q, lambda, zeroprob = 0, lower.tail = TRUE, log.p = FALSE)  rzipois(n, lambda, zeroprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zipois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated Poisson distribution — zipois","text":"x, q integer vector counts lambda vector (non-negative) means zeroprob zero-inflation probability 0 1 log, log.p logical; return log-density TRUE lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zipois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated Poisson distribution — zipois","text":"dzipois gives probability mass function, pzipois gives distribution function, rzipois generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zipois.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero-inflated Poisson distribution — zipois","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zipois.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero-inflated Poisson distribution — zipois","text":"","code":"set.seed(123) x <- rzipois(1, 0.5, 1) d <- dzipois(x, 0.5, 1) p <- pzipois(x, 0.5, 1)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero- and one-inflated beta distribution — zoibeta","title":"Zero- and one-inflated beta distribution — zoibeta","text":"Density, distribution function, random generation zero-one-inflated beta distribution.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero- and one-inflated beta distribution — zoibeta","text":"","code":"dzoibeta(x, shape1, shape2, zeroprob = 0, oneprob = 0, log = FALSE)  pzoibeta(q, shape1, shape2, zeroprob = 0, oneprob = 0,          lower.tail = TRUE, log.p = FALSE)  rzoibeta(n, shape1, shape2, zeroprob = 0, oneprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero- and one-inflated beta distribution — zoibeta","text":"x, q vector quantiles shape1, shape2 non-negative shape parameters beta distribution zeroprob zero-inflation probability 0 1. oneprob zero-inflation probability 0 1. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero- and one-inflated beta distribution — zoibeta","text":"dzoibeta gives density, pzoibeta gives distribution function, rzoibeta generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zero- and one-inflated beta distribution — zoibeta","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zero- and one-inflated beta distribution — zoibeta","text":"","code":"set.seed(123) x <- rzoibeta(1, 2, 2, 0.2, 0.3) d <- dzoibeta(x, 2, 2, 0.2, 0.3) p <- pzoibeta(x, 2, 2, 0.2, 0.3)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta2.html","id":null,"dir":"Reference","previous_headings":"","what":"Reparameterised zero- and one-inflated beta distribution — zoibeta2","title":"Reparameterised zero- and one-inflated beta distribution — zoibeta2","text":"Density, distribution function, random generation zero-one-inflated beta distribution reparameterised terms mean concentration.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reparameterised zero- and one-inflated beta distribution — zoibeta2","text":"","code":"dzoibeta2(x, mu, phi, zeroprob = 0, oneprob = 0, log = FALSE)  pzoibeta2(q, mu, phi, zeroprob = 0, oneprob = 0,          lower.tail = TRUE, log.p = FALSE)  rzoibeta2(n, mu, phi, zeroprob = 0, oneprob = 0)"},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reparameterised zero- and one-inflated beta distribution — zoibeta2","text":"x, q vector quantiles mu mean parameter, must interval 0 1. phi concentration parameter, must positive. zeroprob zero-inflation probability 0 1. oneprob zero-inflation probability 0 1. log, log.p logical; TRUE, probabilities/ densities \\(p\\) returned \\(\\log(p)\\). lower.tail logical; TRUE, probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). n number random values return.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reparameterised zero- and one-inflated beta distribution — zoibeta2","text":"dzoibeta2 gives density, pzoibeta2 gives distribution function, rzoibeta2 generates random deviates.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reparameterised zero- and one-inflated beta distribution — zoibeta2","text":"implementation allows automatic differentiation RTMB.","code":""},{"path":"https://janoleko.github.io/RTMBdist/reference/zoibeta2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reparameterised zero- and one-inflated beta distribution — zoibeta2","text":"","code":"set.seed(123) x <- rzoibeta2(1, 0.6, 2, 0.2, 0.3) d <- dzoibeta2(x, 0.6, 2, 0.2, 0.3) p <- pzoibeta2(x, 0.6, 2, 0.2, 0.3)"},{"path":"https://janoleko.github.io/RTMBdist/news/index.html","id":"rtmbdist-development-version","dir":"Changelog","previous_headings":"","what":"RTMBdist (development version)","title":"RTMBdist (development version)","text":"Package created","code":""},{"path":"https://janoleko.github.io/RTMBdist/news/index.html","id":"rtmbdist-development-version-1","dir":"Changelog","previous_headings":"","what":"RTMBdist 0.0.0.9000","title":"RTMBdist (development version)","text":"Initial release.","code":""}]
